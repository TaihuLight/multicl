const char *cl_source_ratx =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"__kernel void\n"
"ratx_kernel(__global const real* T, __global const real* C,\n"
"		__global real* RF, __global real* RB, __global const real* RKLOW,\n"
"		const real TCONV)\n"
"{\n"
"    const real TEMP = T[get_global_id(0)]*TCONV;\n"
"    const real ALOGT = LOG((TEMP));\n"
"    real CTOT = 0.0;\n"
"    real PR, PCOR, PRLOG, FCENT, FCLOG, XN;\n"
"    real CPRLOG, FLOG, FC;\n"
"    real SQR;\n"
"#ifdef DOUBLE_PRECISION\n"
"    const real SMALL = CPREC(1.0e-200);\n"
"#else\n"
"    const real SMALL = FLT_MIN;\n"
"#endif\n"
"\n"
"//#pragma unroll 22\n"
"    for (unsigned int k=1; k<=22; k++) {\n"
"        CTOT += C(k);\n"
"    }\n"
"\n"
"    real CTB_10 = CTOT + C(1) + 5.e0*C(6) + C(10) + 5.e-1*C(11) + C(12)\n"
"                + 2.e0*C(16) + 2.e0*C(14) + 2.e0*C(15);\n"
"    real CTB_114= CTOT + C(1) + 5.e0*C(6) + C(10) + 5.e-1*C(11) + C(12)\n"
"                + 2.e0*C(16) + CPREC(1.5e0)*C(14) + CPREC(1.5e0)*C(15) ;\n"
"    real CTB_16 = CTOT + C(1) + 5.e0*C(6) + C(10) + 5.e-1*C(11) + C(12)\n"
"                + 2.e0*C(16) + 2.e0*C(14) + 2.e0*C(15) ;\n"
"    \n"
"    //     If fall-off (pressure correction):\n"
"\n"
"    PR = RKLOW(1) * DIV(CTB_16, RF(16));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(2.654e-1)*EXP(DIV(-TEMP,CPREC(9.4e1))) + CPREC(7.346e-1)*EXP(DIV(-TEMP,CPREC(1.756e3)))\n"
"    + EXP(DIV(-CPREC(5.182e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(16) = RF(16) * PCOR;\n"
"    RB(16) = RB(16) * PCOR;\n"
"\n"
"    PR = RKLOW(2) * DIV(CTB_10, RF(31));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(6.8e-2)*EXP(DIV(-TEMP,CPREC(1.97e2))) + CPREC(9.32e-1)*EXP(DIV(-TEMP,CPREC(1.54e3)))\n"
"    + EXP(DIV(-CPREC(1.03e4),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV (CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV (FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(31) = RF(31) * PCOR;\n"
"    RB(31) = RB(31) * PCOR;\n"
"\n"
"    PR = RKLOW(3) * DIV(CTB_10, RF(39));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(4.243e-1)*EXP(DIV(-TEMP,CPREC(2.37e2))) + CPREC(5.757e-1)*EXP(DIV(-TEMP,CPREC(1.652e3)))\n"
"    + EXP(DIV(-CPREC(5.069e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(39) = RF(39) * PCOR;\n"
"    RB(39) = RB(39) * PCOR;\n"
"\n"
"    PR = RKLOW(4) * DIV(CTB_10, RF(41));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(2.176e-1)*EXP(DIV(-TEMP,CPREC(2.71e2))) + CPREC(7.824e-1)*EXP(DIV(-TEMP,CPREC(2.755e3)))\n"
"    + EXP(DIV(-CPREC(6.57e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(41) = RF(41) * PCOR;\n"
"    RB(41) = RB(41) * PCOR;\n"
"\n"
"    PR = RKLOW(5) * DIV(CTB_10, RF(48));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(3.2e-1)*EXP(DIV(-TEMP,CPREC(7.8e1))) + CPREC(6.8e-1)*EXP(DIV(-TEMP,CPREC(1.995e3)))\n"
"    + EXP(DIV(-CPREC(5.59e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(48) = RF(48) * PCOR;\n"
"    RB(48) = RB(48) * PCOR;\n"
"\n"
"    PR = RKLOW(6) * DIV(CTB_10, RF(56));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(4.093e-1)*EXP(DIV(-TEMP,CPREC(2.75e2))) + CPREC(5.907e-1)*EXP(DIV(-TEMP,CPREC(1.226e3)))\n"
"    + EXP(DIV(-CPREC(5.185e3), TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(56) = RF(56) * PCOR;\n"
"    RB(56) = RB(56) * PCOR;\n"
"\n"
"    PR = RKLOW(7) * DIV(CTB_10, RF(71));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(2.42e-1)*EXP(DIV(-TEMP,CPREC(9.4e1))) + CPREC(7.58e-1)*EXP(DIV(-TEMP,CPREC(1.555e3)))\n"
"    + EXP(DIV(-CPREC(4.2e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(71) = RF(71) * PCOR;\n"
"    RB(71) = RB(71) * PCOR;\n"
"\n"
"    PR = RKLOW(8) * DIV(CTB_10, RF(78));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(2.17e-1)*EXP(DIV(-TEMP,CPREC(7.4e1))) + CPREC(7.83e-1)*EXP(DIV(-TEMP,CPREC(2.941e3)))\n"
"    + EXP(DIV(-CPREC(6.964e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(78) = RF(78) * PCOR;\n"
"    RB(78) = RB(78) * PCOR;\n"
"\n"
"    PR = RKLOW(9) * DIV(CTB_10, RF(89));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(3.827e-1)*EXP(DIV(-TEMP,CPREC(1.3076e1))) + CPREC(6.173e-1)*EXP(DIV(-TEMP,CPREC(2.078e3)))\n"
"    + EXP(DIV(-CPREC(5.093e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(89) = RF(89) * PCOR;\n"
"    RB(89) = RB(89) * PCOR;\n"
"\n"
"    PR = RKLOW(10) * DIV(CTB_10, RF(93));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(4.675e-1)*EXP(DIV(-TEMP,CPREC(1.51e2))) + CPREC(5.325e-1)*EXP(DIV(-TEMP,CPREC(1.038e3)))\n"
"    + EXP(DIV(-CPREC(4.97e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(93) = RF(93) * PCOR;\n"
"    RB(93) = RB(93) * PCOR;\n"
"\n"
"    PR = RKLOW(11) * DIV(CTB_114, RF(114));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    RF(114) = RF(114) * PCOR;\n"
"    RB(114) = RB(114) * PCOR;\n"
"\n"
"    PR = RKLOW(12) * DIV(CTB_10, RF(115));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = -CPREC(9.816e-1)*EXP(DIV(-TEMP,CPREC(5.3837e3))) +\n"
"    		CPREC(1.9816e0)*EXP(DIV(-TEMP,CPREC(4.2932e0)))  +\n"
"    		EXP(DIV(CPREC(7.95e-2),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(115) = RF(115) * PCOR;\n"
"    RB(115) = RB(115) * PCOR;\n"
"}\n"
;
