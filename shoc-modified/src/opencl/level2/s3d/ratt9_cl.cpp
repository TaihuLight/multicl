const char *cl_source_ratt9 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"\n"
"__kernel void\n"
"ratt9_kernel(__global const real* T, __global const real* RF,\n"
"		__global real* RB, __global const real* EG, const real TCONV)\n"
"{\n"
"\n"
"    const real TEMP = T[get_global_id(0)]*TCONV;\n"
"    const real ALOGT = LOG(TEMP);\n"
"#ifdef DOUBLE_PRECISION\n"
"    const real SMALL_INV = 1e+300;\n"
"#else \n"
"    const real SMALL_INV = 1e+20f;\n"
"#endif\n"
"\n"
"    const real RU=CPREC(8.31451e7);\n"
"    const real PATM = CPREC(1.01325e6);\n"
"    const real PFAC = DIV (PATM, (RU*(TEMP)));\n"
"    \n"
"    real rtemp_inv;\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(23)), (EG(8)*EG(22)));\n"
"    RB(176) = RF(176) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(23)), (EG(5)*EG(12)*EG(17)*PFAC));\n"
"    RB(177) = RF(177) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(8)*EG(23)), (EG(7)*EG(24)));\n"
"    RB(178) = RF(178) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(16)*EG(23)), (EG(14)*EG(24)));\n"
"    RB(179) = RF(179) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(24)),  (EG(1)*EG(23)));\n"
"    RB(180) = RF(180) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(24)), (EG(5)*EG(23)));\n"
"    RB(181) = RF(181) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(24)), (EG(6)*EG(23)));\n"
"    RB(182) = RF(182) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(11)*EG(24)), (EG(12)*EG(23)));\n"
"    RB(183) = RF(183) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(24)), (EG(13)*EG(23)));\n"
"    RB(184) = RF(184) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(29)*PFAC), EG(30));\n"
"    RB(185) = RF(185) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(29)), (EG(13)*EG(20)));\n"
"    RB(186) = RF(186) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(29)), (EG(4)*EG(30)));\n"
"    RB(187) = RF(187) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(29)), (EG(5)*EG(17)*EG(21)*PFAC));\n"
"    RB(188) = RF(188) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(16)*EG(29)), (EG(14)*EG(30)));\n"
"    RB(189) = RF(189) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(30)*PFAC), EG(31));\n"
"    RB(190) = RF(190) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(30)), (EG(12)*EG(22)));\n"
"    RB(191) = RF(191) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(30)), (EG(1)*EG(29)));\n"
"    RB(192) = RF(192) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(30)), (EG(2)*EG(12)*EG(26)*PFAC));\n"
"    RB(193) = RF(193) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(30)), (EG(16)*EG(23)));\n"
"    RB(194) = RF(194) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(30)), (EG(5)*EG(29)));\n"
"    RB(195) = RF(195) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(30)), (EG(6)*EG(29)));\n"
"    RB(196) = RF(196) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(30)), (EG(8)*EG(29)));\n"
"    RB(197) = RF(197) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(30)), (EG(13)*EG(29)));\n"
"    RB(198) = RF(198) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(31)), (EG(12)*EG(23)));\n"
"    RB(199) = RF(199) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(31)), (EG(1)*EG(30)));\n"
"    RB(200) = RF(200) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(31)), (EG(17)*EG(23)));\n"
"    RB(201) = RF(201) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(31)), (EG(6)*EG(30)));\n"
"    RB(202) = RF(202) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(31)), (EG(7)*EG(30)));\n"
"    RB(203) = RF(203) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(31)), (EG(5)*EG(17)*EG(23)*PFAC));\n"
"    RB(204) = RF(204) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(31)), (EG(13)*EG(30)));\n"
"    RB(205) = RF(205) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(21)*EG(23)), (EG(12)*EG(29)));\n"
"    RB(206) = RF(206) * MIN(rtemp_inv, SMALL_INV);\n"
"}\n"
;
