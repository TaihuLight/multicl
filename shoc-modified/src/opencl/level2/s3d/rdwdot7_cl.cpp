const char *cl_source_rdwdot7 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"#define ROP2(a)  (RKF(a) - RKR (a))\n"
"\n"
"\n"
"__kernel void\n"
"rdwdot7_kernel (__global const real* RKF, __global const real* RKR,\n"
"		__global real* WDOT, const real rateconv, __global const real* molwt)\n"
"{\n"
" \n"
"    WDOT(9) = (+ROP2(48) +ROP2(49) +ROP2(64) -ROP2(78)\n"
"            -ROP2(79) -ROP2(80) -ROP2(81) -ROP2(82)\n"
"            -ROP2(83) -ROP2(84) -ROP2(85) -ROP2(86)\n"
"            -ROP2(87) -ROP2(88) -ROP2(89) -ROP2(90)\n"
"            -ROP2(91) -ROP2(92) -ROP2(93) -ROP2(93)\n"
"            -ROP2(94) -ROP2(94) -ROP2(95) +ROP2(97)\n"
"            +ROP2(102) +ROP2(103) +ROP2(104) +ROP2(106) +ROP2(106)\n"
"            +ROP2(107) +ROP2(107) +ROP2(119) -ROP2(121)\n"
"            +ROP2(128) +ROP2(136) -ROP2(144) -ROP2(145)\n"
"            -ROP2(146) +ROP2(147) +ROP2(149) +ROP2(159)\n"
"            -ROP2(168) -ROP2(169) +ROP2(172) +ROP2(177)\n"
"            +ROP2(183) -ROP2(184) +ROP2(191) +ROP2(193)\n"
"            -ROP2(198) +ROP2(199) -ROP2(205) +ROP2(206))*rateconv *molwt[8];\n"
"    WDOT(10) = (+ROP2(78) +ROP2(84) +ROP2(86) +ROP2(88)\n"
"            +ROP2(90) -ROP2(102) -ROP2(103) -ROP2(104)\n"
"            -ROP2(105) -ROP2(106) -ROP2(107) +ROP2(144)\n"
"            +ROP2(166) +ROP2(168) +ROP2(184) +ROP2(186)\n"
"            +ROP2(198) +ROP2(205))*rateconv *molwt[9];\n"
"\n"
"}\n"
;
