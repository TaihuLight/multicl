const char *cl_source_rdwdot =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"#define ROP2(a)  (RKF(a) - RKR (a))\n"
"\n"
"__kernel void\n"
"rdwdot_kernel (__global const real* RKF, __global const real* RKR,\n"
"		__global real* WDOT, const real rateconv, __global const real* molwt)\n"
"{\n"
"\n"
"    real ROP5 = ROP2(5) + ROP2(6) + ROP2(7) + ROP2(8);\n"
"    real ROP12 = ROP2(12) + ROP2(13) + ROP2(14) + ROP2(15);\n"
"\n"
"    WDOT(2) = (-ROP2(1) +ROP2(2) +ROP2(3) -ROP5 -ROP5\n"
"            -ROP2(9) -ROP2(10) -ROP12 -ROP2(17)\n"
"            -ROP2(18) -ROP2(19) -ROP2(24) -ROP2(25)\n"
"            +ROP2(30) +ROP2(34) +ROP2(35) +ROP2(36)\n"
"            +ROP2(37) -ROP2(41) -ROP2(42) +ROP2(44)\n"
"            +ROP2(46) -ROP2(48) +ROP2(49) +ROP2(50)\n"
"            +ROP2(52) +ROP2(52) +ROP2(53) +ROP2(57)\n"
"            -ROP2(60) +ROP2(62) +ROP2(63) +ROP2(64)\n"
"            +ROP2(65) -ROP2(71) -ROP2(72) +ROP2(77)\n"
"            -ROP2(78) +ROP2(79) +ROP2(87) +ROP2(91)\n"
"            +ROP2(92) +ROP2(94) -ROP2(96) -ROP2(97)\n"
"            -ROP2(98) -ROP2(102) +ROP2(105) -ROP2(108)\n"
"            +ROP2(109) +ROP2(115) +ROP2(116) +ROP2(118)\n"
"            +ROP2(124) -ROP2(126) -ROP2(127) -ROP2(128)\n"
"            -ROP2(132) -ROP2(133) -ROP2(134) +ROP2(135)\n"
"            +ROP2(146) -ROP2(148) -ROP2(149) -ROP2(150)\n"
"            -ROP2(156) -ROP2(157) +ROP2(165) +ROP2(167)\n"
"            -ROP2(170) -ROP2(171) +ROP2(173) -ROP2(180)\n"
"            -ROP2(185) -ROP2(186) -ROP2(190) -ROP2(191)\n"
"            -ROP2(192) +ROP2(193) -ROP2(199) -ROP2(200))*rateconv *molwt[1];\n"
"\n"
"}\n"
;
