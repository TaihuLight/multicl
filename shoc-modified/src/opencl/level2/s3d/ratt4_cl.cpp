const char *cl_source_ratt4 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"\n"
"__kernel void\n"
"ratt4_kernel(__global const real* T, __global const real* RF, __global real* RB,\n"
"		__global const real* EG, const real TCONV)\n"
"{\n"
"\n"
"    real TEMP = T[get_global_id(0)]*TCONV;\n"
"    real ALOGT = LOG(TEMP);\n"
"#ifdef DOUBLE_PRECISION\n"
"    const real SMALL_INV = 1e+300;\n"
"#else \n"
"    const real SMALL_INV = 1e+20f;\n"
"#endif\n"
"\n"
"    const real RU=CPREC(8.31451e7);\n"
"    const real PATM = CPREC(1.01325e6);\n"
"    const real PFAC = DIV (PATM, (RU*(TEMP)));\n"
"\n"
"    real rtemp_inv;\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(10)), (EG(5)*EG(16)));\n"
"    RB(51) = RF(51) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(10)), (EG(2)*EG(2)*EG(15)*PFAC));\n"
"    RB(52) = RF(52) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(10)), (EG(2)*EG(17)));\n"
"    RB(53) = RF(53) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(10)), (EG(6)*EG(9)));\n"
"    RB(54) = RF(54) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(10)), (EG(5)*EG(17)));\n"
"    RB(55) = RF(55) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(10)*EG(14)*PFAC), EG(26));\n"
"    RB(56) = RF(56) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(9)*EG(10)), (EG(2)*EG(19)));\n"
"    RB(57) = RF(57) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(10)*EG(10)), (EG(1)*EG(19)));\n"
"    RB(58) = RF(58) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV (EG(11), EG(10));\n"
"    RB(59) = RF(59) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(11)), (EG(1)*EG(9)));\n"
"    RB(60) = RF(60) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(11)), (EG(1)*EG(14)));\n"
"    RB(61) = RF(61) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(11)), (EG(2)*EG(16)));\n"
"    RB(62) = RF(62) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(11)), (EG(2)*EG(17)));\n"
"    RB(63) = RF(63) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(1)*EG(11)), (EG(2)*EG(12)));\n"
"    RB(64) = RF(64) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(11)), (EG(2)*EG(5)*EG(14)*PFAC));\n"
"    RB(65) = RF(65) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(11)), (EG(6)*EG(14)));\n"
"    RB(66) = RF(66) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV (EG(11), EG(10));\n"
"    RB(67) = RF(67) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV (EG(11), EG(10));\n"
"    RB(68) = RF(68) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV (EG(11), EG(10));\n"
"    RB(69) = RF(69) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(11)*EG(15)), (EG(14)*EG(17)));\n"
"    RB(70) = RF(70) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(17)*PFAC), EG(18));\n"
"    RB(71) = RF(71) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(17)), (EG(1)*EG(16)));\n"
"    RB(72) = RF(72) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(17)), (EG(5)*EG(16)));\n"
"    RB(73) = RF(73) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(17)), (EG(6)*EG(16)));\n"
"    RB(74) = RF(74) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(17)), (EG(7)*EG(16)));\n"
"    RB(75) = RF(75) * MIN(rtemp_inv, SMALL_INV);\n"
"}\n"
;
