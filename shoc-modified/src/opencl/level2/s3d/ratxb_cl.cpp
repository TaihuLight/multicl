const char *cl_source_ratxb =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"\n"
"__kernel void\n"
"ratxb_kernel(__global const real* T, __global const real* C, __global real* RF,\n"
"		__global real* RB, __global const real* RKLOW, const real TCONV)\n"
"{\n"
"\n"
"    const real TEMP = T[get_global_id(0)]*TCONV;\n"
"    const real ALOGT = LOG((TEMP));\n"
"    real CTOT = 0.0f;\n"
"    real PR, PCOR, PRLOG, FCENT, FCLOG, XN;\n"
"    real CPRLOG, FLOG, FC, SQR;\n"
"      \n"
"#ifdef DOUBLE_PRECISION\n"
"    const real SMALL = CPREC(1.0e-200);\n"
"#else\n"
"    const real SMALL = FLT_MIN;\n"
"#endif\n"
"\n"
"//#pragma unroll 22\n"
"    for (unsigned int k=1; k<=22; k++)\n"
"    {\n"
"        CTOT += C(k);\n"
"    }\n"
"\n"
"    real CTB_5  = CTOT - C(1) - C(6) + C(10) - C(12) + 2.e0*C(16)\n"
"                + 2.e0*C(14) + 2.e0*C(15) ;\n"
"    real CTB_9  = CTOT - CPREC(2.7e-1)*C(1) + CPREC(2.65e0)*C(6) + C(10) + 2.e0*C(16)\n"
"                + 2.e0*C(14) + 2.e0*C(15) ;\n"
"    real CTB_10 = CTOT + C(1) + 5.e0*C(6) + C(10) + 5.e-1*C(11) + C(12)\n"
"                + 2.e0*C(16) + 2.e0*C(14) + 2.e0*C(15);\n"
"    real CTB_11 = CTOT + CPREC(1.4e0)*C(1) + CPREC(1.44e1)*C(6) + C(10) + CPREC(7.5e-1)*C(11)\n"
"                + CPREC(2.6e0)*C(12) + 2.e0*C(16) + 2.e0*C(14)\n"
"                + 2.e0*C(15) ;\n"
"    real CTB_12 = CTOT - C(4) - C(6) - CPREC(2.5e-1)*C(11) + 5.e-1*C(12)\n"
"                + 5.e-1*C(16) - C(22) + 2.e0*C(14) + 2.e0*C(15) ;\n"
"    real CTB_29 = CTOT + C(1) + 5.e0*C(4) + 5.e0*C(6) + C(10)\n"
"                + 5.e-1*C(11) + CPREC(2.5e0)*C(12) + 2.e0*C(16)\n"
"                + 2.e0*C(14) + 2.e0*C(15) ;\n"
"    real CTB_190= CTOT + C(1) + 5.e0*C(6) + C(10) + 5.e-1*C(11)\n"
"                + C(12) + 2.e0*C(16) ;\n"
"\n"
"    RF(5) = RF(5)*CTB_5*C(2)*C(2);\n"
"    RB(5) = RB(5)*CTB_5*C(1);\n"
"    RF(9) = RF(9)*CTB_9*C(2)*C(5);\n"
"    RB(9) = RB(9)*CTB_9*C(6);\n"
"    RF(10) = RF(10)*CTB_10*C(3)*C(2);\n"
"    RB(10) = RB(10)*CTB_10*C(5);\n"
"    RF(11) = RF(11)*CTB_11*C(3)*C(3);\n"
"    RB(11) = RB(11)*CTB_11*C(4);\n"
"    RF(12) = RF(12)*CTB_12*C(2)*C(4);\n"
"    RB(12) = RB(12)*CTB_12*C(7);\n"
"    RF(29) = RF(29)*CTB_29*C(11)*C(3);\n"
"    RB(29) = RB(29)*CTB_29*C(12);\n"
"    RF(46) = RF(46)*CTB_10;\n"
"    RB(46) = RB(46)*CTB_10*C(11)*C(2);\n"
"    RF(121) = RF(121)*CTOT*C(14)*C(9);\n"
"    RB(121) = RB(121)*CTOT*C(20);\n"
"\n"
"    \n"
"    PR = RKLOW(13) * DIV(CTB_10, RF(126));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(6.63e-1)*EXP(DIV(-TEMP,CPREC(1.707e3))) + CPREC(3.37e-1)*EXP(DIV(-TEMP,CPREC(3.2e3)))\n"
"    + EXP(DIV(-CPREC(4.131e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(126) = RF(126) * PCOR;\n"
"    RB(126) = RB(126) * PCOR;\n"
"\n"
"    PR = RKLOW(14) * DIV(CTB_10, RF(132));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(2.18e-1)*EXP(DIV(-TEMP,CPREC(2.075e2))) + CPREC(7.82e-1)*EXP(DIV(-TEMP,CPREC(2.663e3)))\n"
"    + EXP(DIV(-CPREC(6.095e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(132) = RF(132) * PCOR;\n"
"    RB(132) = RB(132) * PCOR;\n"
"\n"
"    PR = RKLOW(15) * DIV(CTB_10, RF(145));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(8.25e-1)*EXP(DIV(-TEMP,CPREC(1.3406e3))) + CPREC(1.75e-1)*EXP(DIV(-TEMP,CPREC(6.e4)))\n"
"    + EXP(DIV(-CPREC(1.01398e4),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(145) = RF(145) * PCOR;\n"
"    RB(145) = RB(145) * PCOR;\n"
"\n"
"    PR = RKLOW(16) * DIV(CTB_10, RF(148));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(4.5e-1)*EXP(DIV(-TEMP,CPREC(8.9e3))) + CPREC(5.5e-1)*EXP(DIV(-TEMP,CPREC(4.35e3)))\n"
"    + EXP(DIV(-CPREC(7.244e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(148) = RF(148) * PCOR;\n"
"    RB(148) = RB(148) * PCOR;\n"
"\n"
"    PR = RKLOW(17) * DIV(CTB_10, RF(155));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(2.655e-1)*EXP(DIV(-TEMP,CPREC(1.8e2))) + CPREC(7.345e-1)*EXP(DIV(-TEMP,CPREC(1.035e3)))\n"
"    + EXP(DIV(-CPREC(5.417e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(155) = RF(155) * PCOR;\n"
"    RB(155) = RB(155) * PCOR;\n"
"\n"
"    PR = RKLOW(18) * DIV(CTB_10, RF(156));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(2.47e-2)*EXP(DIV(-TEMP,CPREC(2.1e2))) + CPREC(9.753e-1)*EXP(DIV(-TEMP,CPREC(9.84e2)))\n"
"    + EXP(DIV(-CPREC(4.374e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(156) = RF(156) * PCOR;\n"
"    RB(156) = RB(156) * PCOR;\n"
"\n"
"    PR = RKLOW(19) * DIV(CTB_10, RF(170));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(1.578e-1)*EXP(DIV(-TEMP,CPREC(1.25e2))) + CPREC(8.422e-1)*EXP(DIV(-TEMP,CPREC(2.219e3)))\n"
"    + EXP(DIV(-CPREC(6.882e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(170) = RF(170) * PCOR;\n"
"    RB(170) = RB(170) * PCOR;\n"
"\n"
"    PR = RKLOW(20) * DIV(CTB_10, RF(185));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = CPREC(9.8e-1)*EXP(DIV(-TEMP,CPREC(1.0966e3))) + 2.e-2*EXP(DIV(-TEMP,CPREC(1.0966e3)))\n"
"    + EXP(DIV(-CPREC(6.8595e3),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(185) = RF(185) * PCOR;\n"
"    RB(185) = RB(185) * PCOR;\n"
"\n"
"    PR = RKLOW(21) * DIV(CTB_190, RF(190));\n"
"    PCOR = DIV(PR, (1.0 + PR));\n"
"    PRLOG = LOG10(MAX(PR,SMALL));\n"
"    FCENT = 0.e0*EXP(DIV(-TEMP,CPREC(1.e3))) + 1.e0*EXP(DIV(-TEMP,CPREC(1.31e3)))\n"
"    + EXP(DIV(-CPREC(4.8097e4),TEMP));\n"
"    FCLOG = LOG10(MAX(FCENT,SMALL));\n"
"    XN    = 0.75 - 1.27*FCLOG;\n"
"    CPRLOG= PRLOG - (0.4 + 0.67*FCLOG);\n"
"    SQR = DIV(CPRLOG, (XN-0.14*CPRLOG));\n"
"    FLOG = DIV(FCLOG, (1.0 + SQR*SQR));\n"
"    FC = EXP10(FLOG);\n"
"    PCOR = FC * PCOR;\n"
"    RF(190) = RF(190) * PCOR;\n"
"    RB(190) = RB(190) * PCOR;\n"
"\n"
"}\n"
;
