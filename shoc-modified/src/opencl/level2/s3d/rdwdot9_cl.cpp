const char *cl_source_rdwdot9 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"#define ROP2(a)  (RKF(a) - RKR (a))\n"
"\n"
"\n"
"__kernel void\n"
"rdwdot9_kernel (__global const real* RKF, __global const real* RKR,\n"
"		__global real* WDOT, const real rateconv, __global const real* molwt)\n"
"{\n"
"\n"
"    real ROP27 = ROP2(27) + ROP2(28);\n"
"\n"
"    WDOT(5) = (+ROP2(1) +ROP2(2) -ROP2(3) -ROP2(4) -ROP2(4)\n"
"            -ROP2(9) +ROP2(10) -ROP2(16) -ROP2(16)\n"
"            +ROP2(19) +ROP2(19) +ROP2(20) -ROP2(21)\n"
"            +ROP2(25) +ROP2(26) -ROP27 -ROP2(30)\n"
"            +ROP2(33) -ROP2(35) +ROP2(43) -ROP2(45)\n"
"            +ROP2(51) -ROP2(53) -ROP2(54) +ROP2(55)\n"
"            -ROP2(63) +ROP2(65) +ROP2(73) -ROP2(74)\n"
"            -ROP2(80) -ROP2(81) +ROP2(83) +ROP2(85)\n"
"            +ROP2(97) +ROP2(99) -ROP2(100) +ROP2(103)\n"
"            -ROP2(104) +ROP2(110) -ROP2(118) -ROP2(119)\n"
"            -ROP2(124) +ROP2(129) -ROP2(131) -ROP2(137)\n"
"            +ROP2(141) +ROP2(151) -ROP2(152) +ROP2(154)\n"
"            +ROP2(158) -ROP2(161) +ROP2(163) +ROP2(177)\n"
"            +ROP2(181) -ROP2(182) +ROP2(188) +ROP2(195)\n"
"            -ROP2(196) -ROP2(202) +ROP2(204))*rateconv *molwt[4];\n"
"\n"
"}\n"
;
