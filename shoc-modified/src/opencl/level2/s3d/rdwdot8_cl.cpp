const char *cl_source_rdwdot8 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"#define ROP2(a)  (RKF(a) - RKR (a))\n"
"\n"
"\n"
"__kernel void\n"
"rdwdot8_kernel (__global const real* RKF, __global const real* RKR,\n"
"		__global real* WDOT, const real rateconv, __global const real* molwt)\n"
"{\n"
"\n"
"\n"
"    real ROP12 = ROP2(12) + ROP2(13) + ROP2(14)+ ROP2(15);\n"
"    real ROP22 = ROP2(22) + ROP2(23);\n"
"    real ROP27 = ROP2(27) + ROP2(28);\n"
"\n"
"\n"
"    WDOT(7) = (+ROP12 -ROP2(17) -ROP2(18) -ROP2(19)\n"
"            -ROP2(20) -ROP2(21) -ROP22 -ROP22\n"
"            +ROP2(24) +ROP2(26) +ROP27 -ROP2(33)\n"
"            +ROP2(47) -ROP2(55) +ROP2(75) -ROP2(76)\n"
"            -ROP2(84) -ROP2(85) +ROP2(86) +ROP2(101)\n"
"            +ROP2(138) -ROP2(141) +ROP2(142) +ROP2(153)\n"
"            +ROP2(162) -ROP2(163) +ROP2(174) -ROP2(175)\n"
"            -ROP2(176) -ROP2(177) +ROP2(178) -ROP2(187)\n"
"            -ROP2(188) -ROP2(197) +ROP2(203)\n"
"            -ROP2(204))*rateconv *molwt[6];\n"
"    WDOT(8) = (+ROP2(16) +ROP22 -ROP2(24) -ROP2(25)\n"
"            -ROP2(26) -ROP27 +ROP2(76) -ROP2(86)\n"
"            -ROP2(142) +ROP2(176) -ROP2(178)\n"
"            +ROP2(197))*rateconv *molwt[7];\n"
"}\n"
;
