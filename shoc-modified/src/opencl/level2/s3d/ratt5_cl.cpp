const char *cl_source_ratt5 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"\n"
"__kernel void\n"
"ratt5_kernel(__global const real* T, __global const real* RF,\n"
"		__global real* RB, __global const real* EG, const real TCONV)\n"
"{\n"
"\n"
"    const real TEMP = T[get_global_id(0)]*TCONV;\n"
"    const real ALOGT = LOG(TEMP);\n"
"#ifdef DOUBLE_PRECISION\n"
"    const real SMALL_INV = 1e+300;\n"
"#else \n"
"    const real SMALL_INV = 1e+20f;\n"
"#endif\n"
"\n"
"    const real RU=CPREC(8.31451e7);\n"
"    const real PATM = CPREC(1.01325e6);\n"
"    const real PFAC = DIV (PATM, (RU*(TEMP)));\n"
"\n"
"    real rtemp_inv;\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(17)), (EG(8)*EG(16)));\n"
"    RB(76) = RF(76) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(9)*EG(17)), (EG(2)*EG(26)));\n"
"    RB(77) = RF(77) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(12)*PFAC), EG(13));\n"
"    RB(78) = RF(78) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(12)), (EG(2)*EG(17)));\n"
"    RB(79) = RF(79) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(12)), (EG(6)*EG(10)));\n"
"    RB(80) = RF(80) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(12)), (EG(6)*EG(11)));\n"
"    RB(81) = RF(81) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(12)), (EG(3)*EG(18)));\n"
"    RB(82) = RF(82) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(12)), (EG(5)*EG(17)));\n"
"    RB(83) = RF(83) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(12)), (EG(4)*EG(13)));\n"
"    RB(84) = RF(84) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(12)), (EG(5)*EG(18)));\n"
"    RB(85) = RF(85) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(8)*EG(12)), (EG(7)*EG(13)));\n"
"    RB(86) = RF(86) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(9)*EG(12)), (EG(2)*EG(21)));\n"
"    RB(87) = RF(87) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(16)), (EG(13)*EG(14)));\n"
"    RB(88) = RF(88) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(16)*PFAC), EG(28));\n"
"    RB(89) = RF(89) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(17)), (EG(13)*EG(16)));\n"
"    RB(90) = RF(90) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(10)*EG(12)), (EG(2)*EG(22)));\n"
"    RB(91) = RF(91) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(11)*EG(12)), (EG(2)*EG(22)));\n"
"    RB(92) = RF(92) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(12)*PFAC), EG(24));\n"
"    RB(93) = RF(93) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(12)), (EG(2)*EG(23)));\n"
"    RB(94) = RF(94) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(25)), (EG(14)*EG(22)));\n"
"    RB(95) = RF(95) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(18)), (EG(1)*EG(17)));\n"
"    RB(96) = RF(96) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(18)), (EG(5)*EG(12)));\n"
"    RB(97) = RF(97) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(18)), (EG(6)*EG(11)));\n"
"    RB(98) = RF(98) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(18)), (EG(5)*EG(17)));\n"
"    RB(99) = RF(99) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(18)), (EG(6)*EG(17)));\n"
"    RB(100) = RF(100) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"}\n"
;
