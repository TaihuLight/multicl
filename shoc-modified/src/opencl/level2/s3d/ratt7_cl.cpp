const char *cl_source_ratt7 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"__kernel void\n"
"ratt7_kernel(__global const real* T, __global const real* RF,\n"
"		__global real* RB, __global const real* EG, const real TCONV)\n"
"{\n"
"\n"
"    const real TEMP = T[get_global_id(0)]*TCONV;\n"
"    const real ALOGT = LOG(TEMP);\n"
"#ifdef DOUBLE_PRECISION\n"
"    const real SMALL_INV = 1e+300;\n"
"#else \n"
"    const real SMALL_INV = 1e+20f;\n"
"#endif\n"
"\n"
"    const real RU=CPREC(8.31451e7);\n"
"    const real PATM = CPREC(1.01325e6);\n"
"    const real PFAC = DIV (PATM, (RU*(TEMP)));\n"
"    \n"
"    real rtemp_inv;\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(26)*PFAC), EG(27));\n"
"    RB(126) = RF(126) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(26)), (EG(1)*EG(25)));\n"
"    RB(127) = RF(127) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(26)), (EG(12)*EG(14)));\n"
"    RB(128) = RF(128) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(26)), (EG(5)*EG(25)));\n"
"    RB(129) = RF(129) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(26)), (EG(10)*EG(15)));\n"
"    RB(130) = RF(130) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(26)), (EG(6)*EG(25)));\n"
"    RB(131) = RF(131) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(21)*PFAC), EG(22));\n"
"    RB(132) = RF(132) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(21)), (EG(1)*EG(19)));\n"
"    RB(133) = RF(133) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(21)), (EG(1)*EG(20)));\n"
"    RB(134) = RF(134) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(21)), (EG(2)*EG(26)));\n"
"    RB(135) = RF(135) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(3)*EG(21)), (EG(12)*EG(14)));\n"
"    RB(136) = RF(136) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(5)*EG(21)), (EG(6)*EG(19)));\n"
"    RB(137) = RF(137) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(21)), (EG(7)*EG(19)));\n"
"    RB(138) = RF(138) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(21)), (EG(3)*EG(27)));\n"
"    RB(139) = RF(139) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(4)*EG(21)), (EG(16)*EG(17)));\n"
"    RB(140) = RF(140) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(7)*EG(21)), (EG(5)*EG(27)));\n"
"    RB(141) = RF(141) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(8)*EG(21)), (EG(7)*EG(22)));\n"
"    RB(142) = RF(142) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(16)*EG(21)), (EG(14)*EG(22)));\n"
"    RB(143) = RF(143) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(21)), (EG(13)*EG(19)));\n"
"    RB(144) = RF(144) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(21)*PFAC), EG(30));\n"
"    RB(145) = RF(145) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(12)*EG(21)), (EG(2)*EG(29)));\n"
"    RB(146) = RF(146) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV (EG(27), (EG(12)*EG(14)*PFAC));\n"
"    RB(147) = RF(147) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(27)*PFAC), EG(28));\n"
"    RB(148) = RF(148) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(27)), (EG(12)*EG(16)));\n"
"    RB(149) = RF(149) * MIN(rtemp_inv, SMALL_INV);\n"
"\n"
"    rtemp_inv = DIV ((EG(2)*EG(27)), (EG(1)*EG(26)));\n"
"    RB(150) = RF(150) * MIN(rtemp_inv, SMALL_INV);\n"
"}\n"
;
