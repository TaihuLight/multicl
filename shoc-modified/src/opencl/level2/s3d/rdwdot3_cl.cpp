const char *cl_source_rdwdot3 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"// Macros to explicitly control precision of the constants, otherwise\n"
"// known to cause problems for some Compilers\n"
"#ifdef DOUBLE_PRECISION\n"
"#define CPREC(a) a\n"
"#else\n"
"#define CPREC(a) a##f\n"
"#endif\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"#define ROP2(a)  (RKF(a) - RKR (a))\n"
"\n"
"\n"
"__kernel void\n"
"rdwdot3_kernel (__global const real* RKF, __global const real* RKR,\n"
"		__global real* WDOT, const real rateconv, __global const real* molwt)\n"
"{\n"
" \n"
"    real ROP114 =  ROP2(114) - ROP2(122);\n"
"\n"
"    WDOT(13) = (+ROP2(31) +ROP2(37) +ROP2(41) +ROP2(53)\n"
"            +ROP2(55) +ROP2(63) +ROP2(70) -ROP2(71)\n"
"            -ROP2(72) -ROP2(73) -ROP2(74) -ROP2(75)\n"
"            -ROP2(76) -ROP2(77) +ROP2(79) +ROP2(83)\n"
"            -ROP2(90) +ROP2(96) +ROP2(99) +ROP2(100)\n"
"            +ROP2(101) +ROP2(140) +ROP2(154) +ROP2(160)\n"
"            +ROP2(172) +ROP2(177) +ROP2(188) +ROP2(201)\n"
"            +ROP2(204))*rateconv *molwt[12];\n"
"    WDOT(14) = (+ROP2(57) +ROP2(58) +ROP2(111) +ROP2(113)\n"
"            -ROP114 +ROP2(115) -ROP2(116) -ROP2(117)\n"
"            -ROP2(118) -ROP2(119) -ROP2(120) -ROP2(121)\n"
"            +ROP2(133) +ROP2(137) +ROP2(138) +ROP2(144))*rateconv *molwt[13];\n"
"\n"
"    WDOT(15) = (+ROP2(91) +ROP2(92) +ROP2(95) +ROP2(105)\n"
"            +ROP2(132) +ROP2(142) +ROP2(143) -ROP2(155)\n"
"            -ROP2(156) -ROP2(157) -ROP2(158) -ROP2(159)\n"
"            -ROP2(160) -ROP2(161) -ROP2(162) -ROP2(163)\n"
"            -ROP2(164) -ROP2(165) -ROP2(166) -ROP2(167)\n"
"            -ROP2(168) -ROP2(169) +ROP2(171) +ROP2(174)\n"
"            +ROP2(176) +ROP2(191))*rateconv *molwt[14];\n"
"    WDOT(16) = (+ROP2(93) +ROP2(170) +ROP2(175) +ROP2(178)\n"
"            +ROP2(179) -ROP2(180) -ROP2(181) -ROP2(182)\n"
"            -ROP2(183) -ROP2(184))*rateconv *molwt[15];\n"
"\n"
"    WDOT(17) = (+ROP2(39) -ROP2(95) -ROP2(108) -ROP2(109)\n"
"            -ROP2(110) -ROP2(111) -ROP2(112) -ROP2(113) -ROP2(113)\n"
"            +ROP2(116) +ROP2(127) +ROP2(129) +ROP2(131))*rateconv *molwt[16];\n"
"    WDOT(18) = (+ROP2(56) +ROP2(77) +ROP2(118) +ROP2(124)\n"
"            -ROP2(126) -ROP2(127) -ROP2(128) -ROP2(129)\n"
"            -ROP2(130) -ROP2(131) +ROP2(135) +ROP2(150)\n"
"            +ROP2(151) +ROP2(152) +ROP2(153) +ROP2(193))*rateconv *molwt[17];\n"
"    WDOT(19) = (+ROP2(89) +ROP2(148) +ROP2(163) +ROP2(173))*rateconv *molwt[18];\n"
"}\n"
;
