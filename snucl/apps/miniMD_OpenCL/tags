!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AM	Obj_opencl/setup.cpp	498;"	d	file:
AM	Obj_opencl/setup.cpp	519;"	d	file:
AM	setup.cpp	498;"	d	file:
AM	setup.cpp	519;"	d	file:
ATOM_H	Obj_opencl/atom.h	33;"	d
ATOM_H	atom.h	33;"	d
AllocDevData	Obj_opencl/opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::AllocDevData(unsigned nbytes)$/;"	f	class:OpenCLWrapper
AllocDevData	opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::AllocDevData(unsigned nbytes)$/;"	f	class:OpenCLWrapper
AllocDevDataImageFloat4	Obj_opencl/opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::AllocDevDataImageFloat4(unsigned elements, int &imagesizei)$/;"	f	class:OpenCLWrapper
AllocDevDataImageFloat4	opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::AllocDevDataImageFloat4(unsigned elements, int &imagesizei)$/;"	f	class:OpenCLWrapper
AllocPinnedHostData	Obj_opencl/opencl_wrapper.cpp	/^void* OpenCLWrapper::AllocPinnedHostData(unsigned nbytes)$/;"	f	class:OpenCLWrapper
AllocPinnedHostData	opencl_wrapper.cpp	/^void* OpenCLWrapper::AllocPinnedHostData(unsigned nbytes)$/;"	f	class:OpenCLWrapper
Atom	Obj_opencl/atom.cpp	/^Atom::Atom()$/;"	f	class:Atom
Atom	Obj_opencl/atom.h	/^class Atom {$/;"	c
Atom	atom.cpp	/^Atom::Atom()$/;"	f	class:Atom
Atom	atom.h	/^class Atom {$/;"	c
BUFEXTRA	Obj_opencl/comm.cpp	39;"	d	file:
BUFEXTRA	comm.cpp	39;"	d	file:
BUFFACTOR	Obj_opencl/comm.cpp	37;"	d	file:
BUFFACTOR	comm.cpp	37;"	d	file:
BUFMIN	Obj_opencl/comm.cpp	38;"	d	file:
BUFMIN	comm.cpp	38;"	d	file:
Box	Obj_opencl/atom.h	/^struct Box {$/;"	s
Box	atom.h	/^struct Box {$/;"	s
Buffer	Obj_opencl/opencl_wrapper.h	/^    cl_mem Buffer() {return buffer;};$/;"	f	class:OpenCLWrapper
Buffer	opencl_wrapper.h	/^    cl_mem Buffer() {return buffer;};$/;"	f	class:OpenCLWrapper
BufferGrow	Obj_opencl/opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::BufferGrow(cl_uint newsize)$/;"	f	class:OpenCLWrapper
BufferGrow	opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::BufferGrow(cl_uint newsize)$/;"	f	class:OpenCLWrapper
BufferResize	Obj_opencl/opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::BufferResize(cl_uint newsize)$/;"	f	class:OpenCLWrapper
BufferResize	opencl_wrapper.cpp	/^cl_mem OpenCLWrapper::BufferResize(cl_uint newsize)$/;"	f	class:OpenCLWrapper
BufferSize	Obj_opencl/opencl_wrapper.h	/^    cl_uint BufferSize() {return buffersize;};$/;"	f	class:OpenCLWrapper
BufferSize	opencl_wrapper.h	/^    cl_uint BufferSize() {return buffersize;};$/;"	f	class:OpenCLWrapper
CC	Obj_opencl/Makefile	/^CC =		mpic++ $/;"	m
CCFLAGS	Obj_opencl/Makefile	/^CCFLAGS =	-O3 $(CL_INCLUDE) $(OVERRIDE)$/;"	m
CHUNKSIZE	Obj_opencl/threadData.h	36;"	d
CHUNKSIZE	threadData.h	36;"	d
CL_INCLUDE	Obj_opencl/Makefile	/^CL_INCLUDE = -I$(OPENCL_HOME)\/inc$/;"	m
COMM_H	Obj_opencl/comm.h	33;"	d
COMM_H	comm.h	33;"	d
Comm	Obj_opencl/comm.cpp	/^Comm::Comm()$/;"	f	class:Comm
Comm	Obj_opencl/comm.h	/^class Comm {$/;"	c
Comm	comm.cpp	/^Comm::Comm()$/;"	f	class:Comm
Comm	comm.h	/^class Comm {$/;"	c
CompileProgram	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::CompileProgram(char* options)$/;"	f	class:OpenCLWrapper
CompileProgram	opencl_wrapper.cpp	/^int OpenCLWrapper::CompileProgram(char* options)$/;"	f	class:OpenCLWrapper
CopyBufferToImageFloat4	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::CopyBufferToImageFloat4(cl_mem src_buffer, cl_mem dst_image)$/;"	f	class:OpenCLWrapper
CopyBufferToImageFloat4	opencl_wrapper.cpp	/^int OpenCLWrapper::CopyBufferToImageFloat4(cl_mem src_buffer, cl_mem dst_image)$/;"	f	class:OpenCLWrapper
CreateKernel	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::CreateKernel(const char* kernel_name)$/;"	f	class:OpenCLWrapper
CreateKernel	opencl_wrapper.cpp	/^int OpenCLWrapper::CreateKernel(const char* kernel_name)$/;"	f	class:OpenCLWrapper
DELTA	Obj_opencl/atom.cpp	38;"	d	file:
DELTA	atom.cpp	38;"	d	file:
DownloadData	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::DownloadData(void* host_data, cl_mem dev_data, unsigned nbytes, size_t offset)$/;"	f	class:OpenCLWrapper
DownloadData	opencl_wrapper.cpp	/^int OpenCLWrapper::DownloadData(void* host_data, cl_mem dev_data, unsigned nbytes, size_t offset)$/;"	f	class:OpenCLWrapper
DownloadDataAsync	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::DownloadDataAsync(void* host_data, cl_mem dev_data, unsigned nbytes, unsigned int stream, size_t offset)$/;"	f	class:OpenCLWrapper
DownloadDataAsync	opencl_wrapper.cpp	/^int OpenCLWrapper::DownloadDataAsync(void* host_data, cl_mem dev_data, unsigned nbytes, unsigned int stream, size_t offset)$/;"	f	class:OpenCLWrapper
EXE	Makefile	/^EXE =	$(ROOT)_$@$/;"	m
Error	Obj_opencl/opencl_wrapper.cpp	/^void OpenCLWrapper::Error(cl_int ciErrNUM,const char message[],const char file[],int line)$/;"	f	class:OpenCLWrapper
Error	opencl_wrapper.cpp	/^void OpenCLWrapper::Error(cl_int ciErrNUM,const char message[],const char file[],int line)$/;"	f	class:OpenCLWrapper
F	Obj_opencl/precision.h	105;"	d
F	Obj_opencl/precision.h	69;"	d
F	precision.h	105;"	d
F	precision.h	69;"	d
FACTOR	Obj_opencl/neighbor.cpp	37;"	d	file:
FACTOR	neighbor.cpp	37;"	d	file:
FORCEEAM	Obj_opencl/ljs.h	/^enum ForceStyle {FORCELJ, FORCEEAM};$/;"	e	enum:ForceStyle
FORCEEAM	ljs.h	/^enum ForceStyle {FORCELJ, FORCEEAM};$/;"	e	enum:ForceStyle
FORCELJ	Obj_opencl/ljs.h	/^enum ForceStyle {FORCELJ, FORCEEAM};$/;"	e	enum:ForceStyle
FORCELJ	ljs.h	/^enum ForceStyle {FORCELJ, FORCEEAM};$/;"	e	enum:ForceStyle
FORCE_H	Obj_opencl/force.h	33;"	d
FORCE_H	force.h	33;"	d
Force	Obj_opencl/force.cpp	/^Force::Force() {}$/;"	f	class:Force
Force	Obj_opencl/force.h	/^class Force {$/;"	c
Force	force.cpp	/^Force::Force() {}$/;"	f	class:Force
Force	force.h	/^class Force {$/;"	c
ForceStyle	Obj_opencl/ljs.h	/^enum ForceStyle {FORCELJ, FORCEEAM};$/;"	g
ForceStyle	ljs.h	/^enum ForceStyle {FORCELJ, FORCEEAM};$/;"	g
FreeDevData	Obj_opencl/opencl_wrapper.cpp	/^void OpenCLWrapper::FreeDevData(cl_mem dev_data,unsigned nbytes)$/;"	f	class:OpenCLWrapper
FreeDevData	opencl_wrapper.cpp	/^void OpenCLWrapper::FreeDevData(cl_mem dev_data,unsigned nbytes)$/;"	f	class:OpenCLWrapper
FreePinnedHostData	Obj_opencl/opencl_wrapper.cpp	/^void OpenCLWrapper::FreePinnedHostData(void* host_data)$/;"	f	class:OpenCLWrapper
FreePinnedHostData	opencl_wrapper.cpp	/^void OpenCLWrapper::FreePinnedHostData(void* host_data)$/;"	f	class:OpenCLWrapper
GCC_FLAGS	Obj_opencl/Makefile	/^GCC_FLAGS=-gcc-name=\/opt\/apps\/gcc\/4.5.3\/bin\/gcc -gxx-name=\/opt\/apps\/gcc\/4.5.3\/bin\/g++$/;"	m
GCC_VERSION	Obj_opencl/Makefile	/^GCC_VERSION=4.4$/;"	m
IA	Obj_opencl/setup.cpp	496;"	d	file:
IA	Obj_opencl/setup.cpp	517;"	d	file:
IA	setup.cpp	496;"	d	file:
IA	setup.cpp	517;"	d	file:
IM	Obj_opencl/setup.cpp	497;"	d	file:
IM	Obj_opencl/setup.cpp	518;"	d	file:
IM	setup.cpp	497;"	d	file:
IM	setup.cpp	518;"	d	file:
INC	Makefile	/^INC =	ljs.h atom.h force.h neighbor.h thermo.h timer.h comm.h integrate.h \\$/;"	m
INTEGRATE_H	Obj_opencl/integrate.h	32;"	d
INTEGRATE_H	integrate.h	32;"	d
IQ	Obj_opencl/setup.cpp	499;"	d	file:
IQ	Obj_opencl/setup.cpp	520;"	d	file:
IQ	setup.cpp	499;"	d	file:
IQ	setup.cpp	520;"	d	file:
IR	Obj_opencl/setup.cpp	500;"	d	file:
IR	Obj_opencl/setup.cpp	521;"	d	file:
IR	setup.cpp	500;"	d	file:
IR	setup.cpp	521;"	d	file:
In	Obj_opencl/ljs.h	/^struct In {$/;"	s
In	ljs.h	/^struct In {$/;"	s
Init	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::Init(int argc, char** argv,int me,int ppn,int* devicelist,int platformid,int subdevice)$/;"	f	class:OpenCLWrapper
Init	opencl_wrapper.cpp	/^int OpenCLWrapper::Init(int argc, char** argv,int me,int ppn,int* devicelist,int platformid,int subdevice)$/;"	f	class:OpenCLWrapper
Integrate	Obj_opencl/integrate.cpp	/^Integrate::Integrate() {}$/;"	f	class:Integrate
Integrate	Obj_opencl/integrate.h	/^class Integrate {$/;"	c
Integrate	integrate.cpp	/^Integrate::Integrate() {}$/;"	f	class:Integrate
Integrate	integrate.h	/^class Integrate {$/;"	c
LINK	Obj_opencl/Makefile	/^LINK =		mpic++$/;"	m
LINKFLAGS	Obj_opencl/Makefile	/^LINKFLAGS =	-O3 $(CL_LIB) $(OVERRIDE)$/;"	m
LJ	Obj_opencl/thermo.h	/^enum units {LJ, METAL};$/;"	e	enum:units
LJ	thermo.h	/^enum units {LJ, METAL};$/;"	e	enum:units
LaunchKernel	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::LaunchKernel(const char* kernel_name, int glob_threads, int nargs, ...)$/;"	f	class:OpenCLWrapper
LaunchKernel	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::LaunchKernel(int kernel_num, int glob_threads, int nargs, ...)$/;"	f	class:OpenCLWrapper
LaunchKernel	opencl_wrapper.cpp	/^int OpenCLWrapper::LaunchKernel(const char* kernel_name, int glob_threads, int nargs, ...)$/;"	f	class:OpenCLWrapper
LaunchKernel	opencl_wrapper.cpp	/^int OpenCLWrapper::LaunchKernel(int kernel_num, int glob_threads, int nargs, ...)$/;"	f	class:OpenCLWrapper
MASK	Obj_opencl/setup.cpp	501;"	d	file:
MASK	Obj_opencl/setup.cpp	522;"	d	file:
MASK	setup.cpp	501;"	d	file:
MASK	setup.cpp	522;"	d	file:
MAX	Obj_opencl/comm.cpp	41;"	d	file:
MAX	Obj_opencl/setup.cpp	45;"	d	file:
MAX	comm.cpp	41;"	d	file:
MAX	setup.cpp	45;"	d	file:
MAXLINE	Obj_opencl/input.cpp	46;"	d	file:
MAXLINE	Obj_opencl/ljs.cpp	49;"	d	file:
MAXLINE	Obj_opencl/setup.cpp	50;"	d	file:
MAXLINE	input.cpp	46;"	d	file:
MAXLINE	ljs.cpp	49;"	d	file:
MAXLINE	setup.cpp	50;"	d	file:
MDPREC	Obj_opencl/precision.h	39;"	d
MDPREC	precision.h	39;"	d
METAL	Obj_opencl/thermo.h	/^enum units {LJ, METAL};$/;"	e	enum:units
METAL	thermo.h	/^enum units {LJ, METAL};$/;"	e	enum:units
MIN	Obj_opencl/comm.cpp	40;"	d	file:
MIN	Obj_opencl/setup.cpp	44;"	d	file:
MIN	comm.cpp	40;"	d	file:
MIN	setup.cpp	44;"	d	file:
MMD_float	Obj_opencl/precision.h	/^typedef double MMD_float;$/;"	t
MMD_float	Obj_opencl/precision.h	/^typedef float MMD_float;$/;"	t
MMD_float	precision.h	/^typedef double MMD_float;$/;"	t
MMD_float	precision.h	/^typedef float MMD_float;$/;"	t
MMD_float2	Obj_opencl/thermo.h	/^struct MMD_float2 {$/;"	s
MMD_float2	thermo.h	/^struct MMD_float2 {$/;"	s
MMD_float3	Obj_opencl/precision.h	/^typedef cl_double3 MMD_float3;$/;"	t
MMD_float3	Obj_opencl/precision.h	/^typedef cl_float3 MMD_float3;$/;"	t
MMD_float3	precision.h	/^typedef cl_double3 MMD_float3;$/;"	t
MMD_float3	precision.h	/^typedef cl_float3 MMD_float3;$/;"	t
MMD_float4	Obj_opencl/precision.h	/^typedef cl_double4 MMD_float4;$/;"	t
MMD_float4	Obj_opencl/precision.h	/^typedef cl_float4 MMD_float4;$/;"	t
MMD_float4	precision.h	/^typedef cl_double4 MMD_float4;$/;"	t
MMD_float4	precision.h	/^typedef cl_float4 MMD_float4;$/;"	t
MMD_floatK3	Obj_opencl/precision.h	/^typedef double3 MMD_floatK3;$/;"	t
MMD_floatK3	Obj_opencl/precision.h	/^typedef float3 MMD_floatK3 ;$/;"	t
MMD_floatK3	precision.h	/^typedef double3 MMD_floatK3;$/;"	t
MMD_floatK3	precision.h	/^typedef float3 MMD_floatK3 ;$/;"	t
MMD_floatK4	Obj_opencl/precision.h	/^typedef double4 MMD_floatK4;$/;"	t
MMD_floatK4	Obj_opencl/precision.h	/^typedef float4 MMD_floatK4 ;$/;"	t
MMD_floatK4	precision.h	/^typedef double4 MMD_floatK4;$/;"	t
MMD_floatK4	precision.h	/^typedef float4 MMD_floatK4 ;$/;"	t
Memset	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::Memset(cl_mem dev_data, unsigned nbytes, int value)$/;"	f	class:OpenCLWrapper
Memset	opencl_wrapper.cpp	/^int OpenCLWrapper::Memset(cl_mem dev_data, unsigned nbytes, int value)$/;"	f	class:OpenCLWrapper
NEIGHBOR_H	Obj_opencl/neighbor.h	33;"	d
NEIGHBOR_H	neighbor.h	33;"	d
NSECTIONS	Obj_opencl/setup.cpp	49;"	d	file:
NSECTIONS	setup.cpp	49;"	d	file:
Neighbor	Obj_opencl/neighbor.cpp	/^Neighbor::Neighbor()$/;"	f	class:Neighbor
Neighbor	Obj_opencl/neighbor.h	/^class Neighbor {$/;"	c
Neighbor	neighbor.cpp	/^Neighbor::Neighbor()$/;"	f	class:Neighbor
Neighbor	neighbor.h	/^class Neighbor {$/;"	c
OBJ	Makefile	/^OBJ =	$(SRC:.cpp=.o)$/;"	m
OPENCL_HOME	Obj_opencl/Makefile	/^OPENCL_HOME  = $(SNUCLROOT)$/;"	m
OPENCL_WRAPPER	Obj_opencl/opencl_wrapper.h	33;"	d
OPENCL_WRAPPER	opencl_wrapper.h	33;"	d
OpenCLWrapper	Obj_opencl/opencl_wrapper.cpp	/^OpenCLWrapper::OpenCLWrapper()$/;"	f	class:OpenCLWrapper
OpenCLWrapper	Obj_opencl/opencl_wrapper.h	/^class OpenCLWrapper{$/;"	c
OpenCLWrapper	opencl_wrapper.cpp	/^OpenCLWrapper::OpenCLWrapper()$/;"	f	class:OpenCLWrapper
OpenCLWrapper	opencl_wrapper.h	/^class OpenCLWrapper{$/;"	c
PRECISION_H_	Obj_opencl/precision.h	33;"	d
PRECISION_H_	precision.h	33;"	d
PRECMPI	Obj_opencl/precision.h	110;"	d
PRECMPI	precision.h	110;"	d
ROOT	Makefile	/^ROOT =	miniMD$/;"	m
ReadKernelSource	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::ReadKernelSource(const char* file)$/;"	f	class:OpenCLWrapper
ReadKernelSource	opencl_wrapper.cpp	/^int OpenCLWrapper::ReadKernelSource(const char* file)$/;"	f	class:OpenCLWrapper
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	Obj_opencl/Makefile	/^SHELL = \/bin\/sh$/;"	m
SMALL	Obj_opencl/neighbor.cpp	38;"	d	file:
SMALL	neighbor.cpp	38;"	d	file:
SRC	Makefile	/^SRC =	ljs.cpp input.cpp integrate.cpp atom.cpp force.cpp neighbor.cpp \\$/;"	m
SYSLIB	Obj_opencl/Makefile	/^SYSLIB =$/;"	m
TEXMODE	force_kernel.h	/^const sampler_t TEXMODE = CLK_ADDRESS_NONE|CLK_NORMALIZED_COORDS_FALSE;$/;"	v
THERMO_H	Obj_opencl/thermo.h	33;"	d
THERMO_H	thermo.h	33;"	d
THREADDATA_H	Obj_opencl/threadData.h	33;"	d
THREADDATA_H	threadData.h	33;"	d
TIMER_H	Obj_opencl/timer.h	33;"	d
TIMER_H	timer.h	33;"	d
TIME_COMM	Obj_opencl/timer.h	36;"	d
TIME_COMM	timer.h	36;"	d
TIME_FORCE	Obj_opencl/timer.h	37;"	d
TIME_FORCE	timer.h	37;"	d
TIME_N	Obj_opencl/timer.h	40;"	d
TIME_N	timer.h	40;"	d
TIME_NEIGH	Obj_opencl/timer.h	38;"	d
TIME_NEIGH	timer.h	38;"	d
TIME_TEST	Obj_opencl/timer.h	39;"	d
TIME_TEST	timer.h	39;"	d
TIME_TOTAL	Obj_opencl/timer.h	35;"	d
TIME_TOTAL	timer.h	35;"	d
Thermo	Obj_opencl/thermo.cpp	/^Thermo::Thermo() {}$/;"	f	class:Thermo
Thermo	Obj_opencl/thermo.h	/^class Thermo {$/;"	c
Thermo	thermo.cpp	/^Thermo::Thermo() {}$/;"	f	class:Thermo
Thermo	thermo.h	/^class Thermo {$/;"	c
ThreadData	Obj_opencl/threadData.h	/^  ThreadData() {mpi_me=0; mpi_num_threads=0; omp_me=0; omp_num_threads=1;};$/;"	f	class:ThreadData
ThreadData	Obj_opencl/threadData.h	/^class ThreadData {$/;"	c
ThreadData	threadData.h	/^  ThreadData() {mpi_me=0; mpi_num_threads=0; omp_me=0; omp_num_threads=1;};$/;"	f	class:ThreadData
ThreadData	threadData.h	/^class ThreadData {$/;"	c
Timer	Obj_opencl/timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	Obj_opencl/timer.h	/^class Timer {$/;"	c
Timer	timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	timer.h	/^class Timer {$/;"	c
USRLIB	Obj_opencl/Makefile	/^USRLIB = -lOpenCL #-lintelocl$/;"	m
UploadData	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::UploadData(void* host_data, cl_mem dev_data, unsigned nbytes, size_t offset)$/;"	f	class:OpenCLWrapper
UploadData	opencl_wrapper.cpp	/^int OpenCLWrapper::UploadData(void* host_data, cl_mem dev_data, unsigned nbytes, size_t offset)$/;"	f	class:OpenCLWrapper
UploadDataAsync	Obj_opencl/opencl_wrapper.cpp	/^int OpenCLWrapper::UploadDataAsync(void* host_data, cl_mem dev_data, unsigned nbytes, unsigned int stream, size_t offset)$/;"	f	class:OpenCLWrapper
UploadDataAsync	opencl_wrapper.cpp	/^int OpenCLWrapper::UploadDataAsync(void* host_data, cl_mem dev_data, unsigned nbytes, unsigned int stream, size_t offset)$/;"	f	class:OpenCLWrapper
VARIANT_OPENCL	Obj_opencl/variant.h	32;"	d
VARIANT_OPENCL	variant.h	32;"	d
VARIANT_STRING	Obj_opencl/variant.h	33;"	d
VARIANT_STRING	variant.h	33;"	d
_OPENCL_DATA_H_	Obj_opencl/opencl_data.h	25;"	d
_OPENCL_DATA_H_	opencl_data.h	25;"	d
__CR	Obj_opencl/opencl_wrapper.h	37;"	d
__CR	opencl_wrapper.h	37;"	d
addatom	Obj_opencl/atom.cpp	/^void Atom::addatom(MMD_float x_in, MMD_float y_in, MMD_float z_in, $/;"	f	class:Atom
addatom	atom.cpp	/^void Atom::addatom(MMD_float x_in, MMD_float y_in, MMD_float z_in, $/;"	f	class:Atom
array	Obj_opencl/timer.h	/^  double *array;$/;"	m	class:Timer
array	timer.h	/^  double *array;$/;"	m	class:Timer
atom_comm_self	atom_kernel.h	/^__kernel void atom_comm_self(__global MMD_floatK3* x, __global int* list, int offset, MMD_floatK3 pbc, int first, int n)$/;"	f
atom_pack_comm	atom_kernel.h	/^__kernel void atom_pack_comm(__global MMD_floatK3* x, __global MMD_float* buf, __global int* list, int offset, MMD_floatK3 pbc, int n)$/;"	f
atom_unpack_comm	atom_kernel.h	/^__kernel void atom_unpack_comm(__global MMD_floatK3* x, __global MMD_float* buf, int first, int n)$/;"	f
atoms_per_bin	Obj_opencl/neighbor.h	/^  int atoms_per_bin;$/;"	m	class:Neighbor
atoms_per_bin	neighbor.h	/^  int atoms_per_bin;$/;"	m	class:Neighbor
barrier_start	Obj_opencl/timer.cpp	/^void Timer::barrier_start(int which)$/;"	f	class:Timer
barrier_start	timer.cpp	/^void Timer::barrier_start(int which)$/;"	f	class:Timer
barrier_stop	Obj_opencl/timer.cpp	/^void Timer::barrier_stop(int which)$/;"	f	class:Timer
barrier_stop	timer.cpp	/^void Timer::barrier_stop(int which)$/;"	f	class:Timer
binatoms	Obj_opencl/neighbor.cpp	/^void Neighbor::binatoms(Atom &atom)$/;"	f	class:Neighbor
binatoms	neighbor.cpp	/^void Neighbor::binatoms(Atom &atom)$/;"	f	class:Neighbor
bincount	Obj_opencl/neighbor.h	/^  int *bincount;                    \/\/ ptr to 1st atom in each bin$/;"	m	class:Neighbor
bincount	neighbor.h	/^  int *bincount;                    \/\/ ptr to 1st atom in each bin$/;"	m	class:Neighbor
bindist	Obj_opencl/neighbor.cpp	/^MMD_float Neighbor::bindist(int i, int j, int k)$/;"	f	class:Neighbor
bindist	neighbor.cpp	/^MMD_float Neighbor::bindist(int i, int j, int k)$/;"	f	class:Neighbor
bininvx	Obj_opencl/neighbor.h	/^  MMD_float bininvx,bininvy,bininvz;$/;"	m	class:Neighbor
bininvx	neighbor.h	/^  MMD_float bininvx,bininvy,bininvz;$/;"	m	class:Neighbor
bininvy	Obj_opencl/neighbor.h	/^  MMD_float bininvx,bininvy,bininvz;$/;"	m	class:Neighbor
bininvy	neighbor.h	/^  MMD_float bininvx,bininvy,bininvz;$/;"	m	class:Neighbor
bininvz	Obj_opencl/neighbor.h	/^  MMD_float bininvx,bininvy,bininvz;$/;"	m	class:Neighbor
bininvz	neighbor.h	/^  MMD_float bininvx,bininvy,bininvz;$/;"	m	class:Neighbor
bins	Obj_opencl/neighbor.h	/^  int *bins;                       \/\/ ptr to next atom in each bin$/;"	m	class:Neighbor
bins	neighbor.h	/^  int *bins;                       \/\/ ptr to next atom in each bin$/;"	m	class:Neighbor
binsizex	Obj_opencl/neighbor.h	/^  MMD_float binsizex,binsizey,binsizez;$/;"	m	class:Neighbor
binsizex	neighbor.h	/^  MMD_float binsizex,binsizey,binsizez;$/;"	m	class:Neighbor
binsizey	Obj_opencl/neighbor.h	/^  MMD_float binsizex,binsizey,binsizez;$/;"	m	class:Neighbor
binsizey	neighbor.h	/^  MMD_float binsizex,binsizey,binsizez;$/;"	m	class:Neighbor
binsizez	Obj_opencl/neighbor.h	/^  MMD_float binsizex,binsizey,binsizez;$/;"	m	class:Neighbor
binsizez	neighbor.h	/^  MMD_float binsizex,binsizey,binsizez;$/;"	m	class:Neighbor
blockdim	Obj_opencl/opencl_wrapper.h	/^    cl_uint blockdim;$/;"	m	class:OpenCLWrapper
blockdim	opencl_wrapper.h	/^    cl_uint blockdim;$/;"	m	class:OpenCLWrapper
border_size	Obj_opencl/atom.h	/^  int comm_size,reverse_size,border_size;$/;"	m	class:Atom
border_size	atom.h	/^  int comm_size,reverse_size,border_size;$/;"	m	class:Atom
borders	Obj_opencl/comm.cpp	/^void Comm::borders(Atom &atom)$/;"	f	class:Comm
borders	comm.cpp	/^void Comm::borders(Atom &atom)$/;"	f	class:Comm
box	Obj_opencl/atom.h	/^  struct Box box;$/;"	m	class:Atom	typeref:struct:Atom::Box
box	atom.h	/^  struct Box box;$/;"	m	class:Atom	typeref:struct:Atom::Box
buf_recv	Obj_opencl/comm.h	/^  MMD_float *buf_recv;                 \/\/ recv buffer for all comm$/;"	m	class:Comm
buf_recv	comm.h	/^  MMD_float *buf_recv;                 \/\/ recv buffer for all comm$/;"	m	class:Comm
buf_send	Obj_opencl/comm.h	/^  MMD_float *buf_send;                 \/\/ send buffer for all comm$/;"	m	class:Comm
buf_send	comm.h	/^  MMD_float *buf_send;                 \/\/ send buffer for all comm$/;"	m	class:Comm
buf_size	Obj_opencl/opencl_data.h	/^	int* buf_size;$/;"	m	class:cOpenCLData
buf_size	opencl_data.h	/^	int* buf_size;$/;"	m	class:cOpenCLData
buffer	Obj_opencl/opencl_data.h	/^	void** buffer;$/;"	m	class:cOpenCLData
buffer	Obj_opencl/opencl_wrapper.h	/^    cl_mem buffer;$/;"	m	class:OpenCLWrapper
buffer	opencl_data.h	/^	void** buffer;$/;"	m	class:cOpenCLData
buffer	opencl_wrapper.h	/^    cl_mem buffer;$/;"	m	class:OpenCLWrapper
buffersize	Obj_opencl/opencl_wrapper.h	/^    cl_uint buffersize;$/;"	m	class:OpenCLWrapper
buffersize	opencl_wrapper.h	/^    cl_uint buffersize;$/;"	m	class:OpenCLWrapper
build	Obj_opencl/neighbor.cpp	/^void Neighbor::build(Atom &atom)$/;"	f	class:Neighbor
build	neighbor.cpp	/^void Neighbor::build(Atom &atom)$/;"	f	class:Neighbor
cOpenCLData	Obj_opencl/opencl_data.h	/^::cOpenCLData(OpenCLWrapper* ocl_wrapper, host_type* host_data, unsigned dim_x, unsigned dim_y, unsigned dim_z, bool is_pinned, bool use_image)$/;"	f	class:cOpenCLData
cOpenCLData	Obj_opencl/opencl_data.h	/^::cOpenCLData(OpenCLWrapper* ocl_wrapper, unsigned dim_x, unsigned dim_y, unsigned dim_z, bool is_pinned, bool use_image)$/;"	f	class:cOpenCLData
cOpenCLData	Obj_opencl/opencl_data.h	/^class cOpenCLData$/;"	c
cOpenCLData	opencl_data.h	/^::cOpenCLData(OpenCLWrapper* ocl_wrapper, host_type* host_data, unsigned dim_x, unsigned dim_y, unsigned dim_z, bool is_pinned, bool use_image)$/;"	f	class:cOpenCLData
cOpenCLData	opencl_data.h	/^::cOpenCLData(OpenCLWrapper* ocl_wrapper, unsigned dim_x, unsigned dim_y, unsigned dim_z, bool is_pinned, bool use_image)$/;"	f	class:cOpenCLData
cOpenCLData	opencl_data.h	/^class cOpenCLData$/;"	c
ciErrNum	Obj_opencl/opencl_wrapper.h	/^    cl_int ciErrNum;$/;"	m	class:OpenCLWrapper
ciErrNum	opencl_wrapper.h	/^    cl_int ciErrNum;$/;"	m	class:OpenCLWrapper
comm_recv_size	Obj_opencl/comm.h	/^  int *comm_recv_size;              \/\/ # of values to recv in each comm$/;"	m	class:Comm
comm_recv_size	comm.h	/^  int *comm_recv_size;              \/\/ # of values to recv in each comm$/;"	m	class:Comm
comm_send_size	Obj_opencl/comm.h	/^  int *comm_send_size;              \/\/ # of values to send in each comm$/;"	m	class:Comm
comm_send_size	comm.h	/^  int *comm_send_size;              \/\/ # of values to send in each comm$/;"	m	class:Comm
comm_size	Obj_opencl/atom.h	/^  int comm_size,reverse_size,border_size;$/;"	m	class:Atom
comm_size	atom.h	/^  int comm_size,reverse_size,border_size;$/;"	m	class:Atom
communicate	Obj_opencl/comm.cpp	/^void Comm::communicate(Atom &atom)$/;"	f	class:Comm
communicate	comm.cpp	/^void Comm::communicate(Atom &atom)$/;"	f	class:Comm
compile_kernels	Obj_opencl/ljs.cpp	/^void compile_kernels(OpenCLWrapper* opencl)$/;"	f
compile_kernels	ljs.cpp	/^void compile_kernels(OpenCLWrapper* opencl)$/;"	f
compute	Obj_opencl/force.cpp	/^void Force::compute(Atom &atom, Neighbor &neighbor, int me)$/;"	f	class:Force
compute	Obj_opencl/thermo.cpp	/^void Thermo::compute(int iflag, Atom &atom, Neighbor &neighbor, Force &force, Timer &timer, Comm &comm)$/;"	f	class:Thermo
compute	force.cpp	/^void Force::compute(Atom &atom, Neighbor &neighbor, int me)$/;"	f	class:Force
compute	thermo.cpp	/^void Thermo::compute(int iflag, Atom &atom, Neighbor &neighbor, Force &force, Timer &timer, Comm &comm)$/;"	f	class:Thermo
coord2bin	Obj_opencl/neighbor.cpp	/^int Neighbor::coord2bin(MMD_float x, MMD_float y, MMD_float z)$/;"	f	class:Neighbor
coord2bin	neighbor.cpp	/^int Neighbor::coord2bin(MMD_float x, MMD_float y, MMD_float z)$/;"	f	class:Neighbor
copy	Obj_opencl/atom.cpp	/^void Atom::copy(int i, int j)$/;"	f	class:Atom
copy	atom.cpp	/^void Atom::copy(int i, int j)$/;"	f	class:Atom
copy_mode	Obj_opencl/opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	g
copy_mode	opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	g
create_2d_MMD_float_array	Obj_opencl/atom.cpp	/^MMD_float **Atom::create_2d_MMD_float_array(int n1, int n2)$/;"	f	class:Atom
create_2d_MMD_float_array	atom.cpp	/^MMD_float **Atom::create_2d_MMD_float_array(int n1, int n2)$/;"	f	class:Atom
create_atoms	Obj_opencl/setup.cpp	/^int create_atoms(Atom &atom, int nx, int ny, int nz, double rho)$/;"	f
create_atoms	setup.cpp	/^int create_atoms(Atom &atom, int nx, int ny, int nz, double rho)$/;"	f
create_box	Obj_opencl/setup.cpp	/^void create_box(Atom &atom, int nx, int ny, int nz, double rho)$/;"	f
create_box	setup.cpp	/^void create_box(Atom &atom, int nx, int ny, int nz, double rho)$/;"	f
create_velocity	Obj_opencl/setup.cpp	/^void create_velocity(double t_request, Atom &atom, Thermo &thermo)$/;"	f
create_velocity	setup.cpp	/^void create_velocity(double t_request, Atom &atom, Thermo &thermo)$/;"	f
cutforce	Obj_opencl/force.h	/^  MMD_float cutforce;$/;"	m	class:Force
cutforce	force.h	/^  MMD_float cutforce;$/;"	m	class:Force
cutforcesq	Obj_opencl/force.h	/^  MMD_float cutforcesq;$/;"	m	class:Force
cutforcesq	force.h	/^  MMD_float cutforcesq;$/;"	m	class:Force
cutneigh	Obj_opencl/neighbor.h	/^  MMD_float cutneigh;                 \/\/ neighbor cutoff$/;"	m	class:Neighbor
cutneigh	neighbor.h	/^  MMD_float cutneigh;                 \/\/ neighbor cutoff$/;"	m	class:Neighbor
cutneighsq	Obj_opencl/neighbor.h	/^  MMD_float cutneighsq;               \/\/ neighbor cutoff squared$/;"	m	class:Neighbor
cutneighsq	neighbor.h	/^  MMD_float cutneighsq;               \/\/ neighbor cutoff squared$/;"	m	class:Neighbor
d_bincount	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_bincount;$/;"	m	class:Neighbor
d_bincount	neighbor.h	/^  cOpenCLData<int, int, xx>* d_bincount;$/;"	m	class:Neighbor
d_bins	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_bins;$/;"	m	class:Neighbor
d_bins	neighbor.h	/^  cOpenCLData<int, int, xx>* d_bins;$/;"	m	class:Neighbor
d_buf_recv	Obj_opencl/comm.h	/^  cOpenCLData<MMD_float, MMD_float, xx>* d_buf_recv;$/;"	m	class:Comm
d_buf_recv	comm.h	/^  cOpenCLData<MMD_float, MMD_float, xx>* d_buf_recv;$/;"	m	class:Comm
d_buf_send	Obj_opencl/comm.h	/^  cOpenCLData<MMD_float, MMD_float, xx>* d_buf_send;$/;"	m	class:Comm
d_buf_send	comm.h	/^  cOpenCLData<MMD_float, MMD_float, xx>* d_buf_send;$/;"	m	class:Comm
d_f	Obj_opencl/atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_f;$/;"	m	class:Atom
d_f	atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_f;$/;"	m	class:Atom
d_flag	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_flag;$/;"	m	class:Neighbor
d_flag	neighbor.h	/^  cOpenCLData<int, int, xx>* d_flag;$/;"	m	class:Neighbor
d_ibins	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_ibins;$/;"	m	class:Neighbor
d_ibins	neighbor.h	/^  cOpenCLData<int, int, xx>* d_ibins;$/;"	m	class:Neighbor
d_ilist	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_ilist;$/;"	m	class:Neighbor
d_ilist	neighbor.h	/^  cOpenCLData<int, int, xx>* d_ilist;$/;"	m	class:Neighbor
d_neighbors	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_neighbors;$/;"	m	class:Neighbor
d_neighbors	neighbor.h	/^  cOpenCLData<int, int, xx>* d_neighbors;$/;"	m	class:Neighbor
d_numneigh	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_numneigh;$/;"	m	class:Neighbor
d_numneigh	neighbor.h	/^  cOpenCLData<int, int, xx>* d_numneigh;$/;"	m	class:Neighbor
d_sendlist	Obj_opencl/comm.h	/^  cOpenCLData<int, int, xy>* d_sendlist;$/;"	m	class:Comm
d_sendlist	comm.h	/^  cOpenCLData<int, int, xy>* d_sendlist;$/;"	m	class:Comm
d_stencil	Obj_opencl/neighbor.h	/^  cOpenCLData<int, int, xx>* d_stencil;$/;"	m	class:Neighbor
d_stencil	neighbor.h	/^  cOpenCLData<int, int, xx>* d_stencil;$/;"	m	class:Neighbor
d_v	Obj_opencl/atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_v;$/;"	m	class:Atom
d_v	atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_v;$/;"	m	class:Atom
d_vold	Obj_opencl/atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_vold;$/;"	m	class:Atom
d_vold	atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_vold;$/;"	m	class:Atom
d_x	Obj_opencl/atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_x;$/;"	m	class:Atom
d_x	atom.h	/^  cOpenCLData<MMD_float3, MMD_float3, xx>* d_x;$/;"	m	class:Atom
datafile	Obj_opencl/ljs.h	/^  char* datafile;$/;"	m	struct:In
datafile	ljs.h	/^  char* datafile;$/;"	m	struct:In
defaultQueue	Obj_opencl/opencl_wrapper.h	/^    cl_command_queue defaultQueue;$/;"	m	class:OpenCLWrapper
defaultQueue	opencl_wrapper.h	/^    cl_command_queue defaultQueue;$/;"	m	class:OpenCLWrapper
destroy_2d_MMD_float_array	Obj_opencl/atom.cpp	/^void Atom::destroy_2d_MMD_float_array(MMD_float **array)$/;"	f	class:Atom
destroy_2d_MMD_float_array	atom.cpp	/^void Atom::destroy_2d_MMD_float_array(MMD_float **array)$/;"	f	class:Atom
devData	Obj_opencl/opencl_data.h	/^	cl_mem devData() {return dev_data;};$/;"	f	class:cOpenCLData
devData	opencl_data.h	/^	cl_mem devData() {return dev_data;};$/;"	f	class:cOpenCLData
devDataRef	Obj_opencl/opencl_data.h	/^	cl_mem* devDataRef() {return &dev_data;};$/;"	f	class:cOpenCLData
devDataRef	opencl_data.h	/^	cl_mem* devDataRef() {return &dev_data;};$/;"	f	class:cOpenCLData
devImageRef	Obj_opencl/opencl_data.h	/^	cl_mem* devImageRef() {return &dev_image;};$/;"	f	class:cOpenCLData
devImageRef	opencl_data.h	/^	cl_mem* devImageRef() {return &dev_image;};$/;"	f	class:cOpenCLData
devSize	Obj_opencl/opencl_data.h	/^	int devSize() {return nbytes;}$/;"	f	class:cOpenCLData
devSize	opencl_data.h	/^	int devSize() {return nbytes;}$/;"	f	class:cOpenCLData
dev_data	Obj_opencl/opencl_data.h	/^	cl_mem dev_data;$/;"	m	class:cOpenCLData
dev_data	opencl_data.h	/^	cl_mem dev_data;$/;"	m	class:cOpenCLData
dev_image	Obj_opencl/opencl_data.h	/^	cl_mem dev_image;$/;"	m	class:cOpenCLData
dev_image	opencl_data.h	/^	cl_mem dev_image;$/;"	m	class:cOpenCLData
deviceIDs	Obj_opencl/opencl_wrapper.h	/^    cl_device_id* deviceIDs;$/;"	m	class:OpenCLWrapper
deviceIDs	opencl_wrapper.h	/^    cl_device_id* deviceIDs;$/;"	m	class:OpenCLWrapper
dim	Obj_opencl/opencl_data.h	/^	unsigned int dim[3];$/;"	m	class:cOpenCLData
dim	opencl_data.h	/^	unsigned int dim[3];$/;"	m	class:cOpenCLData
do_safeexchange	Obj_opencl/comm.h	/^  int do_safeexchange;$/;"	m	class:Comm
do_safeexchange	comm.h	/^  int do_safeexchange;$/;"	m	class:Comm
dof_boltz	Obj_opencl/thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
dof_boltz	thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
double3	Obj_opencl/precision.h	/^typedef struct sdouble3 double3;$/;"	t	typeref:struct:sdouble3
double3	precision.h	/^typedef struct sdouble3 double3;$/;"	t	typeref:struct:sdouble3
double4	Obj_opencl/precision.h	/^typedef struct sdouble4 double4;$/;"	t	typeref:struct:sdouble4
double4	precision.h	/^typedef struct sdouble4 double4;$/;"	t	typeref:struct:sdouble4
download	Obj_opencl/opencl_data.h	/^::download()$/;"	f	class:cOpenCLData
download	opencl_data.h	/^::download()$/;"	f	class:cOpenCLData
downloadAsync	Obj_opencl/opencl_data.h	/^::downloadAsync(unsigned int stream)$/;"	f	class:cOpenCLData
downloadAsync	opencl_data.h	/^::downloadAsync(unsigned int stream)$/;"	f	class:cOpenCLData
dt	Obj_opencl/integrate.h	/^  MMD_float dt;$/;"	m	class:Integrate
dt	Obj_opencl/ljs.h	/^  MMD_float dt;$/;"	m	struct:In
dt	integrate.h	/^  MMD_float dt;$/;"	m	class:Integrate
dt	ljs.h	/^  MMD_float dt;$/;"	m	struct:In
dtforce	Obj_opencl/integrate.h	/^  MMD_float dtforce;$/;"	m	class:Integrate
dtforce	integrate.h	/^  MMD_float dtforce;$/;"	m	class:Integrate
e_act	Obj_opencl/thermo.h	/^  MMD_float t_act,p_act,e_act;$/;"	m	class:Thermo
e_act	thermo.h	/^  MMD_float t_act,p_act,e_act;$/;"	m	class:Thermo
e_scale	Obj_opencl/thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
e_scale	thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
energy_virial	Obj_opencl/thermo.cpp	/^MMD_float2 Thermo::energy_virial(Atom &atom, Neighbor &neighbor, Force &force)$/;"	f	class:Thermo
energy_virial	thermo.cpp	/^MMD_float2 Thermo::energy_virial(Atom &atom, Neighbor &neighbor, Force &force)$/;"	f	class:Thermo
engarr	Obj_opencl/thermo.h	/^  MMD_float *engarr;$/;"	m	class:Thermo
engarr	thermo.h	/^  MMD_float *engarr;$/;"	m	class:Thermo
every	Obj_opencl/neighbor.h	/^  int every;                       \/\/ re-neighbor every this often$/;"	m	class:Neighbor
every	neighbor.h	/^  int every;                       \/\/ re-neighbor every this often$/;"	m	class:Neighbor
exchange	Obj_opencl/comm.cpp	/^void Comm::exchange(Atom &atom)$/;"	f	class:Comm
exchange	comm.cpp	/^void Comm::exchange(Atom &atom)$/;"	f	class:Comm
f	Obj_opencl/atom.h	/^  MMD_float3 *f;$/;"	m	class:Atom
f	atom.h	/^  MMD_float3 *f;$/;"	m	class:Atom
fetch_tex	force_kernel.h	/^__inline float4 fetch_tex(__read_only image2d_t I,int i,int size) {return read_imagef(I,TEXMODE,(int2)(i%size,i\/size));};$/;"	f
firstrecv	Obj_opencl/comm.h	/^  int *firstrecv;                   \/\/ where to put 1st recv atom in each swap$/;"	m	class:Comm
firstrecv	comm.h	/^  int *firstrecv;                   \/\/ where to put 1st recv atom in each swap$/;"	m	class:Comm
float3	Obj_opencl/precision.h	/^typedef struct sfloat3 float3;$/;"	t	typeref:struct:sfloat3
float3	precision.h	/^typedef struct sfloat3 float3;$/;"	t	typeref:struct:sfloat3
float4	Obj_opencl/precision.h	/^typedef struct sfloat4 float4;$/;"	t	typeref:struct:sfloat4
float4	precision.h	/^typedef struct sfloat4 float4;$/;"	t	typeref:struct:sfloat4
force	Makefile	/^force=lj$/;"	m
force_compute	force_kernel.h	/^__kernel void force_compute(__global MMD_floatK3* x, __global MMD_floatK3* f, __global int* numneigh,$/;"	f
force_compute_loop	force_kernel.h	/^__kernel void force_compute_loop(__global MMD_floatK3* x, __global MMD_floatK3* f, __global int* numneigh,$/;"	f
force_compute_split	force_kernel.h	/^__kernel void force_compute_split(__global MMD_floatK3* x, __global MMD_floatK3* f, __global int* numneigh,$/;"	f
force_compute_tex	force_kernel.h	/^__kernel void force_compute_tex(__read_only image2d_t x, __global MMD_floatK3* f, __global int* numneigh,$/;"	f
force_cut	Obj_opencl/ljs.h	/^  MMD_float force_cut;$/;"	m	struct:In
force_cut	ljs.h	/^  MMD_float force_cut;$/;"	m	struct:In
forcetype	Obj_opencl/ljs.h	/^  ForceStyle forcetype;$/;"	m	struct:In
forcetype	ljs.h	/^  ForceStyle forcetype;$/;"	m	struct:In
fp	Obj_opencl/setup.cpp	/^FILE* fp;$/;"	v
fp	setup.cpp	/^FILE* fp;$/;"	v
getDim	Obj_opencl/opencl_data.h	/^	unsigned int* getDim() {return dim;};$/;"	f	class:cOpenCLData
getDim	opencl_data.h	/^	unsigned int* getDim() {return dim;};$/;"	f	class:cOpenCLData
ghost_newton	Obj_opencl/neighbor.h	/^  int ghost_newton;$/;"	m	class:Neighbor
ghost_newton	neighbor.h	/^  int ghost_newton;$/;"	m	class:Neighbor
growarray	Obj_opencl/atom.cpp	/^void Atom::growarray()$/;"	f	class:Atom
growarray	atom.cpp	/^void Atom::growarray()$/;"	f	class:Atom
growlist	Obj_opencl/comm.cpp	/^void Comm::growlist(int iswapa, int n)$/;"	f	class:Comm
growlist	comm.cpp	/^void Comm::growlist(int iswapa, int n)$/;"	f	class:Comm
growrecv	Obj_opencl/comm.cpp	/^void Comm::growrecv(int n)$/;"	f	class:Comm
growrecv	comm.cpp	/^void Comm::growrecv(int n)$/;"	f	class:Comm
growsend	Obj_opencl/comm.cpp	/^void Comm::growsend(int n)$/;"	f	class:Comm
growsend	comm.cpp	/^void Comm::growsend(int n)$/;"	f	class:Comm
halfneigh	Makefile	/^halfneigh=0$/;"	m
halfneigh	Obj_opencl/neighbor.h	/^  int halfneigh;$/;"	m	class:Neighbor
halfneigh	neighbor.h	/^  int halfneigh;$/;"	m	class:Neighbor
hostData	Obj_opencl/opencl_data.h	/^	host_type* hostData() { return host_data;};$/;"	f	class:cOpenCLData
hostData	opencl_data.h	/^	host_type* hostData() { return host_data;};$/;"	f	class:cOpenCLData
host_data	Obj_opencl/opencl_data.h	/^	host_type* host_data;$/;"	m	class:cOpenCLData
host_data	opencl_data.h	/^	host_type* host_data;$/;"	m	class:cOpenCLData
ibins	Obj_opencl/neighbor.h	/^  int *ibins;                       \/\/ ptr to next atom in each bin$/;"	m	class:Neighbor
ibins	neighbor.h	/^  int *ibins;                       \/\/ ptr to next atom in each bin$/;"	m	class:Neighbor
ilist	Obj_opencl/neighbor.h	/^  int *ilist;                       \/\/ ptr to next atom in each bin$/;"	m	class:Neighbor
ilist	neighbor.h	/^  int *ilist;                       \/\/ ptr to next atom in each bin$/;"	m	class:Neighbor
imagesize	Obj_opencl/opencl_data.h	/^	int imagesize;$/;"	m	class:cOpenCLData
imagesize	opencl_data.h	/^	int imagesize;$/;"	m	class:cOpenCLData
input	Obj_opencl/input.cpp	/^int input(In &in, char* filename)$/;"	f
input	input.cpp	/^int input(In &in, char* filename)$/;"	f
integrate_final	integrate_kernel.h	/^__kernel void integrate_final(__global MMD_floatK3* v, __global MMD_floatK3* f, int nlocal, MMD_float dt,int nmax)$/;"	f
integrate_initial	integrate_kernel.h	/^__kernel void integrate_initial(__global MMD_floatK3* x, __global MMD_floatK3* v,__global MMD_floatK3* f, int nlocal, MMD_float dt,MMD_float dtforce,int nmax)$/;"	f
is_continues	Obj_opencl/opencl_data.h	/^	bool is_continues;$/;"	m	class:cOpenCLData
is_continues	opencl_data.h	/^	bool is_continues;$/;"	m	class:cOpenCLData
is_cpu	Obj_opencl/opencl_wrapper.h	/^    bool is_cpu;$/;"	m	class:OpenCLWrapper
is_cpu	opencl_wrapper.h	/^    bool is_cpu;$/;"	m	class:OpenCLWrapper
kernel_names	Obj_opencl/opencl_wrapper.h	/^	char** kernel_names;$/;"	m	class:OpenCLWrapper
kernel_names	opencl_wrapper.h	/^	char** kernel_names;$/;"	m	class:OpenCLWrapper
kernel_source	Obj_opencl/opencl_wrapper.h	/^	char** kernel_source;$/;"	m	class:OpenCLWrapper
kernel_source	opencl_wrapper.h	/^	char** kernel_source;$/;"	m	class:OpenCLWrapper
kernels	Obj_opencl/opencl_wrapper.h	/^	cl_kernel* kernels;$/;"	m	class:OpenCLWrapper
kernels	opencl_wrapper.h	/^	cl_kernel* kernels;$/;"	m	class:OpenCLWrapper
keyword	Obj_opencl/setup.cpp	/^char keyword[MAXLINE];$/;"	v
keyword	setup.cpp	/^char keyword[MAXLINE];$/;"	v
line	Obj_opencl/setup.cpp	/^char line[MAXLINE];$/;"	v
line	setup.cpp	/^char line[MAXLINE];$/;"	v
main	Obj_opencl/ljs.cpp	/^int main(int argc, char **argv)$/;"	f
main	ljs.cpp	/^int main(int argc, char **argv)$/;"	f
mass	Obj_opencl/atom.h	/^  MMD_float mass;$/;"	m	class:Atom
mass	atom.h	/^  MMD_float mass;$/;"	m	class:Atom
max_kernels	Obj_opencl/opencl_wrapper.h	/^	cl_uint max_kernels;$/;"	m	class:OpenCLWrapper
max_kernels	opencl_wrapper.h	/^	cl_uint max_kernels;$/;"	m	class:OpenCLWrapper
max_pinned_host_buffers	Obj_opencl/opencl_wrapper.h	/^	cl_uint max_pinned_host_buffers;$/;"	m	class:OpenCLWrapper
max_pinned_host_buffers	opencl_wrapper.h	/^	cl_uint max_pinned_host_buffers;$/;"	m	class:OpenCLWrapper
max_totalneigh	Obj_opencl/neighbor.h	/^  int max_totalneigh;              \/\/ largest # of neighbors ever stored$/;"	m	class:Neighbor
max_totalneigh	neighbor.h	/^  int max_totalneigh;              \/\/ largest # of neighbors ever stored$/;"	m	class:Neighbor
maxneighs	Obj_opencl/neighbor.h	/^  int maxneighs;				   \/\/ max number of neighbors per atom$/;"	m	class:Neighbor
maxneighs	neighbor.h	/^  int maxneighs;				   \/\/ max number of neighbors per atom$/;"	m	class:Neighbor
maxrecv	Obj_opencl/comm.h	/^  int maxrecv;$/;"	m	class:Comm
maxrecv	comm.h	/^  int maxrecv;$/;"	m	class:Comm
maxsend	Obj_opencl/comm.h	/^  int maxsend;$/;"	m	class:Comm
maxsend	comm.h	/^  int maxsend;$/;"	m	class:Comm
maxsendlist	Obj_opencl/comm.h	/^  int *maxsendlist;$/;"	m	class:Comm
maxsendlist	comm.h	/^  int *maxsendlist;$/;"	m	class:Comm
mbins	Obj_opencl/neighbor.h	/^  int mbins;                       \/\/ binning parameters$/;"	m	class:Neighbor
mbins	neighbor.h	/^  int mbins;                       \/\/ binning parameters$/;"	m	class:Neighbor
mbinx	Obj_opencl/neighbor.h	/^  int mbinx,mbiny,mbinz;$/;"	m	class:Neighbor
mbinx	neighbor.h	/^  int mbinx,mbiny,mbinz;$/;"	m	class:Neighbor
mbinxlo	Obj_opencl/neighbor.h	/^  int mbinxlo,mbinylo,mbinzlo;$/;"	m	class:Neighbor
mbinxlo	neighbor.h	/^  int mbinxlo,mbinylo,mbinzlo;$/;"	m	class:Neighbor
mbiny	Obj_opencl/neighbor.h	/^  int mbinx,mbiny,mbinz;$/;"	m	class:Neighbor
mbiny	neighbor.h	/^  int mbinx,mbiny,mbinz;$/;"	m	class:Neighbor
mbinylo	Obj_opencl/neighbor.h	/^  int mbinxlo,mbinylo,mbinzlo;$/;"	m	class:Neighbor
mbinylo	neighbor.h	/^  int mbinxlo,mbinylo,mbinzlo;$/;"	m	class:Neighbor
mbinz	Obj_opencl/neighbor.h	/^  int mbinx,mbiny,mbinz;$/;"	m	class:Neighbor
mbinz	neighbor.h	/^  int mbinx,mbiny,mbinz;$/;"	m	class:Neighbor
mbinzlo	Obj_opencl/neighbor.h	/^  int mbinxlo,mbinylo,mbinzlo;$/;"	m	class:Neighbor
mbinzlo	neighbor.h	/^  int mbinxlo,mbinylo,mbinzlo;$/;"	m	class:Neighbor
me	Obj_opencl/comm.h	/^  int me;                           \/\/ my proc ID$/;"	m	class:Comm
me	comm.h	/^  int me;                           \/\/ my proc ID$/;"	m	class:Comm
memsetDevice	Obj_opencl/opencl_data.h	/^::memsetDevice(int value)$/;"	f	class:cOpenCLData
memsetDevice	opencl_data.h	/^::memsetDevice(int value)$/;"	f	class:cOpenCLData
mpi_me	Obj_opencl/threadData.h	/^  int mpi_me;$/;"	m	class:ThreadData
mpi_me	threadData.h	/^  int mpi_me;$/;"	m	class:ThreadData
mpi_num_threads	Obj_opencl/threadData.h	/^  int mpi_num_threads;$/;"	m	class:ThreadData
mpi_num_threads	threadData.h	/^  int mpi_num_threads;$/;"	m	class:ThreadData
mstat	Obj_opencl/thermo.h	/^  int mstat;$/;"	m	class:Thermo
mstat	thermo.h	/^  int mstat;$/;"	m	class:Thermo
mvv2e	Obj_opencl/thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
mvv2e	thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
myDevice	Obj_opencl/opencl_wrapper.h	/^    cl_device_id myDevice;$/;"	m	class:OpenCLWrapper
myDevice	opencl_wrapper.h	/^    cl_device_id myDevice;$/;"	m	class:OpenCLWrapper
myGPUContext	Obj_opencl/opencl_wrapper.h	/^    cl_context myGPUContext;$/;"	m	class:OpenCLWrapper
myGPUContext	opencl_wrapper.h	/^    cl_context myGPUContext;$/;"	m	class:OpenCLWrapper
myPlatform	Obj_opencl/opencl_wrapper.h	/^    cl_platform_id myPlatform;$/;"	m	class:OpenCLWrapper
myPlatform	opencl_wrapper.h	/^    cl_platform_id myPlatform;$/;"	m	class:OpenCLWrapper
natoms	Obj_opencl/atom.h	/^  int natoms;$/;"	m	class:Atom
natoms	atom.h	/^  int natoms;$/;"	m	class:Atom
nbinx	Obj_opencl/neighbor.h	/^  int nbinx,nbiny,nbinz;           \/\/ # of global bins$/;"	m	class:Neighbor
nbinx	neighbor.h	/^  int nbinx,nbiny,nbinz;           \/\/ # of global bins$/;"	m	class:Neighbor
nbiny	Obj_opencl/neighbor.h	/^  int nbinx,nbiny,nbinz;           \/\/ # of global bins$/;"	m	class:Neighbor
nbiny	neighbor.h	/^  int nbinx,nbiny,nbinz;           \/\/ # of global bins$/;"	m	class:Neighbor
nbinz	Obj_opencl/neighbor.h	/^  int nbinx,nbiny,nbinz;           \/\/ # of global bins$/;"	m	class:Neighbor
nbinz	neighbor.h	/^  int nbinx,nbiny,nbinz;           \/\/ # of global bins$/;"	m	class:Neighbor
nbytes	Obj_opencl/opencl_data.h	/^	unsigned nbytes;$/;"	m	class:cOpenCLData
nbytes	opencl_data.h	/^	unsigned nbytes;$/;"	m	class:cOpenCLData
nbytes_device	Obj_opencl/opencl_data.h	/^	unsigned nbytes_device;$/;"	m	class:cOpenCLData
nbytes_device	opencl_data.h	/^	unsigned nbytes_device;$/;"	m	class:cOpenCLData
ncalls	Obj_opencl/neighbor.h	/^  int ncalls;                      \/\/ # of times build has been called$/;"	m	class:Neighbor
ncalls	neighbor.h	/^  int ncalls;                      \/\/ # of times build has been called$/;"	m	class:Neighbor
need	Obj_opencl/comm.h	/^  int need[3];                      \/\/ how many procs away needed in each dim$/;"	m	class:Comm
need	comm.h	/^  int need[3];                      \/\/ how many procs away needed in each dim$/;"	m	class:Comm
neigh_cut	Obj_opencl/ljs.h	/^  MMD_float neigh_cut;$/;"	m	struct:In
neigh_cut	ljs.h	/^  MMD_float neigh_cut;$/;"	m	struct:In
neigh_every	Obj_opencl/ljs.h	/^  int neigh_every;$/;"	m	struct:In
neigh_every	ljs.h	/^  int neigh_every;$/;"	m	struct:In
neighbor_bin	neighbor_kernel.h	/^__kernel void neighbor_bin(__global MMD_floatK3* xg, __global int* bincount, __global int* bins,$/;"	f
neighbor_build	neighbor_kernel.h	/^__kernel void neighbor_build(__global MMD_floatK3* x, __global int* numneigh, __global int* neighbors,$/;"	f
neighbors	Obj_opencl/neighbor.h	/^  int *neighbors;                  \/\/ array of neighbors of each atom$/;"	m	class:Neighbor
neighbors	neighbor.h	/^  int *neighbors;                  \/\/ array of neighbors of each atom$/;"	m	class:Neighbor
nghost	Obj_opencl/atom.h	/^  int nlocal,nghost;$/;"	m	class:Atom
nghost	atom.h	/^  int nlocal,nghost;$/;"	m	class:Atom
nlocal	Obj_opencl/atom.h	/^  int nlocal,nghost;$/;"	m	class:Atom
nlocal	atom.h	/^  int nlocal,nghost;$/;"	m	class:Atom
nmax	Obj_opencl/atom.h	/^  int nmax;$/;"	m	class:Atom
nmax	Obj_opencl/neighbor.h	/^  int nmax;                        \/\/ max size of atom arrays in neighbor$/;"	m	class:Neighbor
nmax	atom.h	/^  int nmax;$/;"	m	class:Atom
nmax	neighbor.h	/^  int nmax;                        \/\/ max size of atom arrays in neighbor$/;"	m	class:Neighbor
nstat	Obj_opencl/thermo.h	/^  int nstat;$/;"	m	class:Thermo
nstat	thermo.h	/^  int nstat;$/;"	m	class:Thermo
nstencil	Obj_opencl/neighbor.h	/^  int nstencil;                    \/\/ # of bins in stencil$/;"	m	class:Neighbor
nstencil	neighbor.h	/^  int nstencil;                    \/\/ # of bins in stencil$/;"	m	class:Neighbor
nswap	Obj_opencl/comm.h	/^  int nswap;                        \/\/ # of swaps to perform$/;"	m	class:Comm
nswap	comm.h	/^  int nswap;                        \/\/ # of swaps to perform$/;"	m	class:Comm
ntimes	Obj_opencl/integrate.h	/^  int ntimes;$/;"	m	class:Integrate
ntimes	Obj_opencl/ljs.h	/^  int ntimes;$/;"	m	struct:In
ntimes	Obj_opencl/thermo.h	/^  int ntimes;$/;"	m	class:Thermo
ntimes	integrate.h	/^  int ntimes;$/;"	m	class:Integrate
ntimes	ljs.h	/^  int ntimes;$/;"	m	struct:In
ntimes	thermo.h	/^  int ntimes;$/;"	m	class:Thermo
num_devices	Obj_opencl/opencl_wrapper.h	/^    cl_uint num_devices;$/;"	m	class:OpenCLWrapper
num_devices	opencl_wrapper.h	/^    cl_uint num_devices;$/;"	m	class:OpenCLWrapper
num_kernel_sources	Obj_opencl/opencl_wrapper.h	/^	cl_uint num_kernel_sources;$/;"	m	class:OpenCLWrapper
num_kernel_sources	opencl_wrapper.h	/^	cl_uint num_kernel_sources;$/;"	m	class:OpenCLWrapper
num_kernels	Obj_opencl/opencl_wrapper.h	/^	cl_uint num_kernels;$/;"	m	class:OpenCLWrapper
num_kernels	opencl_wrapper.h	/^	cl_uint num_kernels;$/;"	m	class:OpenCLWrapper
num_pinned_host_buffers	Obj_opencl/opencl_wrapper.h	/^	cl_uint num_pinned_host_buffers;$/;"	m	class:OpenCLWrapper
num_pinned_host_buffers	opencl_wrapper.h	/^	cl_uint num_pinned_host_buffers;$/;"	m	class:OpenCLWrapper
num_platforms	Obj_opencl/opencl_wrapper.h	/^    cl_uint num_platforms;$/;"	m	class:OpenCLWrapper
num_platforms	opencl_wrapper.h	/^    cl_uint num_platforms;$/;"	m	class:OpenCLWrapper
num_queues	Obj_opencl/opencl_wrapper.h	/^    cl_uint num_queues;$/;"	m	class:OpenCLWrapper
num_queues	opencl_wrapper.h	/^    cl_uint num_queues;$/;"	m	class:OpenCLWrapper
num_subdevices	Obj_opencl/opencl_wrapper.h	/^    cl_uint num_subdevices;$/;"	m	class:OpenCLWrapper
num_subdevices	opencl_wrapper.h	/^    cl_uint num_subdevices;$/;"	m	class:OpenCLWrapper
numneigh	Obj_opencl/neighbor.h	/^  int *numneigh;                   \/\/ # of neighbors for each atom$/;"	m	class:Neighbor
numneigh	neighbor.h	/^  int *numneigh;                   \/\/ # of neighbors for each atom$/;"	m	class:Neighbor
nx	Obj_opencl/ljs.h	/^  int nx, ny, nz;$/;"	m	struct:In
nx	ljs.h	/^  int nx, ny, nz;$/;"	m	struct:In
ny	Obj_opencl/ljs.h	/^  int nx, ny, nz;$/;"	m	struct:In
ny	ljs.h	/^  int nx, ny, nz;$/;"	m	struct:In
nz	Obj_opencl/ljs.h	/^  int nx, ny, nz;$/;"	m	struct:In
nz	ljs.h	/^  int nx, ny, nz;$/;"	m	struct:In
omp_me	Obj_opencl/threadData.h	/^  int omp_me;$/;"	m	class:ThreadData
omp_me	threadData.h	/^  int omp_me;$/;"	m	class:ThreadData
omp_num_threads	Obj_opencl/threadData.h	/^  int omp_num_threads;$/;"	m	class:ThreadData
omp_num_threads	threadData.h	/^  int omp_num_threads;$/;"	m	class:ThreadData
opencl	Obj_opencl/atom.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Atom
opencl	Obj_opencl/comm.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Comm
opencl	Obj_opencl/force.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Force
opencl	Obj_opencl/integrate.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Integrate
opencl	Obj_opencl/neighbor.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Neighbor
opencl	atom.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Atom
opencl	comm.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Comm
opencl	force.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Force
opencl	integrate.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Integrate
opencl	neighbor.h	/^  OpenCLWrapper* opencl;$/;"	m	class:Neighbor
output	Obj_opencl/output.cpp	/^void output(In &in, Atom &atom, Force& force, Neighbor &neighbor, Comm &comm,$/;"	f
output	output.cpp	/^void output(In &in, Atom &atom, Force& force, Neighbor &neighbor, Comm &comm,$/;"	f
owns_host_data	Obj_opencl/opencl_data.h	/^	bool owns_host_data;$/;"	m	class:cOpenCLData
owns_host_data	opencl_data.h	/^	bool owns_host_data;$/;"	m	class:cOpenCLData
p_act	Obj_opencl/thermo.h	/^  MMD_float t_act,p_act,e_act;$/;"	m	class:Thermo
p_act	thermo.h	/^  MMD_float t_act,p_act,e_act;$/;"	m	class:Thermo
p_scale	Obj_opencl/thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
p_scale	thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
pack_border	Obj_opencl/atom.cpp	/^int Atom::pack_border(int i, MMD_float *buf, int *pbc_flags)$/;"	f	class:Atom
pack_border	atom.cpp	/^int Atom::pack_border(int i, MMD_float *buf, int *pbc_flags)$/;"	f	class:Atom
pack_comm	Obj_opencl/atom.cpp	/^void Atom::pack_comm(int n, int *list, MMD_float *buf, int *pbc_flags)$/;"	f	class:Atom
pack_comm	atom.cpp	/^void Atom::pack_comm(int n, int *list, MMD_float *buf, int *pbc_flags)$/;"	f	class:Atom
pack_exchange	Obj_opencl/atom.cpp	/^int Atom::pack_exchange(int i, MMD_float *buf)$/;"	f	class:Atom
pack_exchange	atom.cpp	/^int Atom::pack_exchange(int i, MMD_float *buf)$/;"	f	class:Atom
pack_reverse	Obj_opencl/atom.cpp	/^void Atom::pack_reverse(int n, int first, MMD_float *buf)$/;"	f	class:Atom
pack_reverse	atom.cpp	/^void Atom::pack_reverse(int n, int first, MMD_float *buf)$/;"	f	class:Atom
path	Makefile	/^path=""$/;"	m
pbc	Obj_opencl/atom.cpp	/^void Atom::pbc()$/;"	f	class:Atom
pbc	atom.cpp	/^void Atom::pbc()$/;"	f	class:Atom
pbc_any	Obj_opencl/comm.h	/^  int *pbc_any;                     \/\/ whether any PBC on this swap$/;"	m	class:Comm
pbc_any	comm.h	/^  int *pbc_any;                     \/\/ whether any PBC on this swap$/;"	m	class:Comm
pbc_flagx	Obj_opencl/comm.h	/^  int *pbc_flagx;                   \/\/ PBC correction in x for this swap$/;"	m	class:Comm
pbc_flagx	comm.h	/^  int *pbc_flagx;                   \/\/ PBC correction in x for this swap$/;"	m	class:Comm
pbc_flagy	Obj_opencl/comm.h	/^  int *pbc_flagy;                   \/\/ same in y$/;"	m	class:Comm
pbc_flagy	comm.h	/^  int *pbc_flagy;                   \/\/ same in y$/;"	m	class:Comm
pbc_flagz	Obj_opencl/comm.h	/^  int *pbc_flagz;                   \/\/ same in z$/;"	m	class:Comm
pbc_flagz	comm.h	/^  int *pbc_flagz;                   \/\/ same in z$/;"	m	class:Comm
pinned	Obj_opencl/opencl_data.h	/^	bool pinned;$/;"	m	class:cOpenCLData
pinned	opencl_data.h	/^	bool pinned;$/;"	m	class:cOpenCLData
pinned_host_buffers	Obj_opencl/opencl_wrapper.h	/^	cl_mem* pinned_host_buffers;$/;"	m	class:OpenCLWrapper
pinned_host_buffers	opencl_wrapper.h	/^	cl_mem* pinned_host_buffers;$/;"	m	class:OpenCLWrapper
pinned_host_buffers_pointers	Obj_opencl/opencl_wrapper.h	/^	void** pinned_host_buffers_pointers;$/;"	m	class:OpenCLWrapper
pinned_host_buffers_pointers	opencl_wrapper.h	/^	void** pinned_host_buffers_pointers;$/;"	m	class:OpenCLWrapper
platformIDs	Obj_opencl/opencl_wrapper.h	/^    cl_platform_id* platformIDs;$/;"	m	class:OpenCLWrapper
platformIDs	opencl_wrapper.h	/^    cl_platform_id* platformIDs;$/;"	m	class:OpenCLWrapper
pressure	Obj_opencl/thermo.cpp	/^MMD_float Thermo::pressure(MMD_float t, Atom &atom)$/;"	f	class:Thermo
pressure	thermo.cpp	/^MMD_float Thermo::pressure(MMD_float t, Atom &atom)$/;"	f	class:Thermo
previous_time	Obj_opencl/timer.h	/^  timespec previous_time,previous_time_extra;$/;"	m	class:Timer
previous_time	timer.h	/^  timespec previous_time,previous_time_extra;$/;"	m	class:Timer
previous_time_d	Obj_opencl/timer.h	/^  double previous_time_d,previous_time_extra_d;$/;"	m	class:Timer
previous_time_d	timer.h	/^  double previous_time_d,previous_time_extra_d;$/;"	m	class:Timer
previous_time_extra	Obj_opencl/timer.h	/^  timespec previous_time,previous_time_extra;$/;"	m	class:Timer
previous_time_extra	timer.h	/^  timespec previous_time,previous_time_extra;$/;"	m	class:Timer
previous_time_extra_d	Obj_opencl/timer.h	/^  double previous_time_d,previous_time_extra_d;$/;"	m	class:Timer
previous_time_extra_d	timer.h	/^  double previous_time_d,previous_time_extra_d;$/;"	m	class:Timer
procgrid	Obj_opencl/comm.h	/^  int procgrid[3];                  \/\/ # of procs in each dim$/;"	m	class:Comm
procgrid	comm.h	/^  int procgrid[3];                  \/\/ # of procs in each dim$/;"	m	class:Comm
procneigh	Obj_opencl/comm.h	/^  int procneigh[3][2];           \/\/ my 6 proc neighbors$/;"	m	class:Comm
procneigh	comm.h	/^  int procneigh[3][2];           \/\/ my 6 proc neighbors$/;"	m	class:Comm
program	Obj_opencl/opencl_wrapper.h	/^	cl_program program;$/;"	m	class:OpenCLWrapper
program	opencl_wrapper.h	/^	cl_program program;$/;"	m	class:OpenCLWrapper
prsarr	Obj_opencl/thermo.h	/^  MMD_float *prsarr;$/;"	m	class:Thermo
prsarr	thermo.h	/^  MMD_float *prsarr;$/;"	m	class:Thermo
queues	Obj_opencl/opencl_wrapper.h	/^    cl_command_queue* queues;$/;"	m	class:OpenCLWrapper
queues	opencl_wrapper.h	/^    cl_command_queue* queues;$/;"	m	class:OpenCLWrapper
random	Obj_opencl/setup.cpp	/^double random(int* idum)$/;"	f
random	setup.cpp	/^double random(int* idum)$/;"	f
read_lammps_atoms	Obj_opencl/setup.cpp	/^void read_lammps_atoms(Atom &atom, MMD_float3* x)$/;"	f
read_lammps_atoms	setup.cpp	/^void read_lammps_atoms(Atom &atom, MMD_float3* x)$/;"	f
read_lammps_data	Obj_opencl/setup.cpp	/^int read_lammps_data(Atom &atom, Comm &comm, Neighbor &neighbor, Integrate &integrate, Thermo &thermo, char* file, int units)$/;"	f
read_lammps_data	setup.cpp	/^int read_lammps_data(Atom &atom, Comm &comm, Neighbor &neighbor, Integrate &integrate, Thermo &thermo, char* file, int units)$/;"	f
read_lammps_header	Obj_opencl/setup.cpp	/^void read_lammps_header(Atom &atom)$/;"	f
read_lammps_header	setup.cpp	/^void read_lammps_header(Atom &atom)$/;"	f
read_lammps_parse_keyword	Obj_opencl/setup.cpp	/^void read_lammps_parse_keyword(int first)$/;"	f
read_lammps_parse_keyword	setup.cpp	/^void read_lammps_parse_keyword(int first)$/;"	f
read_lammps_velocities	Obj_opencl/setup.cpp	/^void read_lammps_velocities(Atom &atom, MMD_float3* v)$/;"	f
read_lammps_velocities	setup.cpp	/^void read_lammps_velocities(Atom &atom, MMD_float3* v)$/;"	f
realloc_2d_MMD_float_array	Obj_opencl/atom.cpp	/^MMD_float **Atom::realloc_2d_MMD_float_array(MMD_float **array, $/;"	f	class:Atom
realloc_2d_MMD_float_array	atom.cpp	/^MMD_float **Atom::realloc_2d_MMD_float_array(MMD_float **array, $/;"	f	class:Atom
recvnum	Obj_opencl/comm.h	/^  int *sendnum,*recvnum;            \/\/ # of atoms to send\/recv in each swap$/;"	m	class:Comm
recvnum	comm.h	/^  int *sendnum,*recvnum;            \/\/ # of atoms to send\/recv in each swap$/;"	m	class:Comm
recvproc	Obj_opencl/comm.h	/^  int *sendproc,*recvproc;          \/\/ proc to send\/recv with at each swap$/;"	m	class:Comm
recvproc	comm.h	/^  int *sendproc,*recvproc;          \/\/ proc to send\/recv with at each swap$/;"	m	class:Comm
reverse_communicate	Obj_opencl/comm.cpp	/^void Comm::reverse_communicate(Atom &atom)$/;"	f	class:Comm
reverse_communicate	comm.cpp	/^void Comm::reverse_communicate(Atom &atom)$/;"	f	class:Comm
reverse_recv_size	Obj_opencl/comm.h	/^  int *reverse_recv_size;           \/\/ # of values to recv in each reverse$/;"	m	class:Comm
reverse_recv_size	comm.h	/^  int *reverse_recv_size;           \/\/ # of values to recv in each reverse$/;"	m	class:Comm
reverse_send_size	Obj_opencl/comm.h	/^  int *reverse_send_size;           \/\/ # of values to send in each reverse$/;"	m	class:Comm
reverse_send_size	comm.h	/^  int *reverse_send_size;           \/\/ # of values to send in each reverse$/;"	m	class:Comm
reverse_size	Obj_opencl/atom.h	/^  int comm_size,reverse_size,border_size;$/;"	m	class:Atom
reverse_size	atom.h	/^  int comm_size,reverse_size,border_size;$/;"	m	class:Atom
rho	Obj_opencl/ljs.h	/^  MMD_float rho;$/;"	m	struct:In
rho	Obj_opencl/thermo.h	/^  MMD_float rho;$/;"	m	class:Thermo
rho	ljs.h	/^  MMD_float rho;$/;"	m	struct:In
rho	thermo.h	/^  MMD_float rho;$/;"	m	class:Thermo
run	Obj_opencl/integrate.cpp	/^void Integrate::run(Atom &atom, Force &force, Neighbor &neighbor,$/;"	f	class:Integrate
run	integrate.cpp	/^void Integrate::run(Atom &atom, Force &force, Neighbor &neighbor,$/;"	f	class:Integrate
scope	Makefile	/^scope=0$/;"	m
sdouble3	Obj_opencl/precision.h	/^struct sdouble3{$/;"	s
sdouble3	precision.h	/^struct sdouble3{$/;"	s
sdouble4	Obj_opencl/precision.h	/^struct sdouble4{$/;"	s
sdouble4	precision.h	/^struct sdouble4{$/;"	s
sendlist	Obj_opencl/comm.h	/^  int **sendlist;                   \/\/ list of atoms to send in each swap$/;"	m	class:Comm
sendlist	comm.h	/^  int **sendlist;                   \/\/ list of atoms to send in each swap$/;"	m	class:Comm
sendnum	Obj_opencl/comm.h	/^  int *sendnum,*recvnum;            \/\/ # of atoms to send\/recv in each swap$/;"	m	class:Comm
sendnum	comm.h	/^  int *sendnum,*recvnum;            \/\/ # of atoms to send\/recv in each swap$/;"	m	class:Comm
sendproc	Obj_opencl/comm.h	/^  int *sendproc,*recvproc;          \/\/ proc to send\/recv with at each swap$/;"	m	class:Comm
sendproc	comm.h	/^  int *sendproc,*recvproc;          \/\/ proc to send\/recv with at each swap$/;"	m	class:Comm
setHostData	Obj_opencl/opencl_data.h	/^::setHostData(host_type* host_data)$/;"	f	class:cOpenCLData
setHostData	opencl_data.h	/^::setHostData(host_type* host_data)$/;"	f	class:cOpenCLData
setup	Obj_opencl/comm.cpp	/^int Comm::setup(MMD_float cutneigh, Atom &atom)$/;"	f	class:Comm
setup	Obj_opencl/force.cpp	/^void Force::setup()$/;"	f	class:Force
setup	Obj_opencl/integrate.cpp	/^void Integrate::setup()$/;"	f	class:Integrate
setup	Obj_opencl/neighbor.cpp	/^int Neighbor::setup(Atom &atom)$/;"	f	class:Neighbor
setup	Obj_opencl/thermo.cpp	/^void Thermo::setup(MMD_float rho_in, Integrate &integrate, Atom &atom,int units)$/;"	f	class:Thermo
setup	comm.cpp	/^int Comm::setup(MMD_float cutneigh, Atom &atom)$/;"	f	class:Comm
setup	force.cpp	/^void Force::setup()$/;"	f	class:Force
setup	integrate.cpp	/^void Integrate::setup()$/;"	f	class:Integrate
setup	neighbor.cpp	/^int Neighbor::setup(Atom &atom)$/;"	f	class:Neighbor
setup	thermo.cpp	/^void Thermo::setup(MMD_float rho_in, Integrate &integrate, Atom &atom,int units)$/;"	f	class:Thermo
sfloat3	Obj_opencl/precision.h	/^struct sfloat3{$/;"	s
sfloat3	precision.h	/^struct sfloat3{$/;"	s
sfloat4	Obj_opencl/precision.h	/^struct sfloat4{$/;"	s
sfloat4	precision.h	/^struct sfloat4{$/;"	s
skip_exchange	Obj_opencl/atom.cpp	/^int Atom::skip_exchange(MMD_float *buf)$/;"	f	class:Atom
skip_exchange	atom.cpp	/^int Atom::skip_exchange(MMD_float *buf)$/;"	f	class:Atom
slabhi	Obj_opencl/comm.h	/^  MMD_float *slablo,*slabhi;           \/\/ bounds of slabs to send to other procs$/;"	m	class:Comm
slabhi	comm.h	/^  MMD_float *slablo,*slabhi;           \/\/ bounds of slabs to send to other procs$/;"	m	class:Comm
slablo	Obj_opencl/comm.h	/^  MMD_float *slablo,*slabhi;           \/\/ bounds of slabs to send to other procs$/;"	m	class:Comm
slablo	comm.h	/^  MMD_float *slablo,*slabhi;           \/\/ bounds of slabs to send to other procs$/;"	m	class:Comm
stamp	Obj_opencl/timer.cpp	/^void Timer::stamp()$/;"	f	class:Timer
stamp	Obj_opencl/timer.cpp	/^void Timer::stamp(int which)$/;"	f	class:Timer
stamp	timer.cpp	/^void Timer::stamp()$/;"	f	class:Timer
stamp	timer.cpp	/^void Timer::stamp(int which)$/;"	f	class:Timer
stamp_extra_start	Obj_opencl/timer.cpp	/^void Timer::stamp_extra_start()$/;"	f	class:Timer
stamp_extra_start	timer.cpp	/^void Timer::stamp_extra_start()$/;"	f	class:Timer
stamp_extra_stop	Obj_opencl/timer.cpp	/^void Timer::stamp_extra_stop(int which)$/;"	f	class:Timer
stamp_extra_stop	timer.cpp	/^void Timer::stamp_extra_stop(int which)$/;"	f	class:Timer
stats	Obj_opencl/output.cpp	/^void stats(int n, double* data, double* pave, double* pmax, double* pmin,$/;"	f
stats	output.cpp	/^void stats(int n, double* data, double* pave, double* pmax, double* pmin,$/;"	f
stencil	Obj_opencl/neighbor.h	/^  int *stencil;                    \/\/ stencil list of bin offsets$/;"	m	class:Neighbor
stencil	neighbor.h	/^  int *stencil;                    \/\/ stencil list of bin offsets$/;"	m	class:Neighbor
steparr	Obj_opencl/thermo.h	/^  int *steparr;$/;"	m	class:Thermo
steparr	thermo.h	/^  int *steparr;$/;"	m	class:Thermo
subdeviceIDs	Obj_opencl/opencl_wrapper.h	/^    cl_device_id* subdeviceIDs;$/;"	m	class:OpenCLWrapper
subdeviceIDs	opencl_wrapper.h	/^    cl_device_id* subdeviceIDs;$/;"	m	class:OpenCLWrapper
syncImage	Obj_opencl/opencl_data.h	/^	void syncImage() {};\/\/wrapper->CopyBufferToImageFloat4(dev_data,dev_image);};$/;"	f	class:cOpenCLData
syncImage	opencl_data.h	/^	void syncImage() {};\/\/wrapper->CopyBufferToImageFloat4(dev_data,dev_image);};$/;"	f	class:cOpenCLData
t_act	Obj_opencl/thermo.h	/^  MMD_float t_act,p_act,e_act;$/;"	m	class:Thermo
t_act	thermo.h	/^  MMD_float t_act,p_act,e_act;$/;"	m	class:Thermo
t_request	Obj_opencl/ljs.h	/^  MMD_float t_request;$/;"	m	struct:In
t_request	ljs.h	/^  MMD_float t_request;$/;"	m	struct:In
t_scale	Obj_opencl/thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
t_scale	thermo.h	/^  MMD_float t_scale, e_scale, p_scale, mvv2e, dof_boltz;$/;"	m	class:Thermo
temp_data	Obj_opencl/opencl_data.h	/^	dev_type* temp_data;$/;"	m	class:cOpenCLData
temp_data	opencl_data.h	/^	dev_type* temp_data;$/;"	m	class:cOpenCLData
temperature	Obj_opencl/thermo.cpp	/^MMD_float Thermo::temperature(Atom &atom)$/;"	f	class:Thermo
temperature	thermo.cpp	/^MMD_float Thermo::temperature(Atom &atom)$/;"	f	class:Thermo
thermo_nstat	Obj_opencl/ljs.h	/^  int thermo_nstat;$/;"	m	struct:In
thermo_nstat	ljs.h	/^  int thermo_nstat;$/;"	m	struct:In
threads	Obj_opencl/atom.h	/^  ThreadData* threads;$/;"	m	class:Atom
threads	Obj_opencl/comm.h	/^  ThreadData* threads;$/;"	m	class:Comm
threads	Obj_opencl/force.h	/^  ThreadData* threads;$/;"	m	class:Force
threads	Obj_opencl/integrate.h	/^  ThreadData* threads;$/;"	m	class:Integrate
threads	Obj_opencl/neighbor.h	/^  ThreadData* threads;$/;"	m	class:Neighbor
threads	Obj_opencl/thermo.h	/^  ThreadData* threads;$/;"	m	class:Thermo
threads	atom.h	/^  ThreadData* threads;$/;"	m	class:Atom
threads	comm.h	/^  ThreadData* threads;$/;"	m	class:Comm
threads	force.h	/^  ThreadData* threads;$/;"	m	class:Force
threads	integrate.h	/^  ThreadData* threads;$/;"	m	class:Integrate
threads	neighbor.h	/^  ThreadData* threads;$/;"	m	class:Neighbor
threads	thermo.h	/^  ThreadData* threads;$/;"	m	class:Thermo
threads_per_atom	Obj_opencl/atom.h	/^  int threads_per_atom;$/;"	m	class:Atom
threads_per_atom	atom.h	/^  int threads_per_atom;$/;"	m	class:Atom
tmparr	Obj_opencl/thermo.h	/^  MMD_float *tmparr;$/;"	m	class:Thermo
tmparr	thermo.h	/^  MMD_float *tmparr;$/;"	m	class:Thermo
total_dev_mem	Obj_opencl/opencl_wrapper.h	/^    cl_uint total_dev_mem;$/;"	m	class:OpenCLWrapper
total_dev_mem	opencl_wrapper.h	/^    cl_uint total_dev_mem;$/;"	m	class:OpenCLWrapper
units	Obj_opencl/ljs.h	/^  int units;$/;"	m	struct:In
units	Obj_opencl/thermo.h	/^enum units {LJ, METAL};$/;"	g
units	ljs.h	/^  int units;$/;"	m	struct:In
units	thermo.h	/^enum units {LJ, METAL};$/;"	g
unpack_border	Obj_opencl/atom.cpp	/^int Atom::unpack_border(int i, MMD_float *buf)$/;"	f	class:Atom
unpack_border	atom.cpp	/^int Atom::unpack_border(int i, MMD_float *buf)$/;"	f	class:Atom
unpack_comm	Obj_opencl/atom.cpp	/^void Atom::unpack_comm(int n, int first, MMD_float *buf)$/;"	f	class:Atom
unpack_comm	atom.cpp	/^void Atom::unpack_comm(int n, int first, MMD_float *buf)$/;"	f	class:Atom
unpack_exchange	Obj_opencl/atom.cpp	/^int Atom::unpack_exchange(int i, MMD_float *buf)$/;"	f	class:Atom
unpack_exchange	atom.cpp	/^int Atom::unpack_exchange(int i, MMD_float *buf)$/;"	f	class:Atom
unpack_reverse	Obj_opencl/atom.cpp	/^void Atom::unpack_reverse(int n, int *list, MMD_float *buf)$/;"	f	class:Atom
unpack_reverse	atom.cpp	/^void Atom::unpack_reverse(int n, int *list, MMD_float *buf)$/;"	f	class:Atom
upload	Obj_opencl/opencl_data.h	/^::upload()$/;"	f	class:cOpenCLData
upload	opencl_data.h	/^::upload()$/;"	f	class:cOpenCLData
uploadAsync	Obj_opencl/opencl_data.h	/^::uploadAsync(unsigned int stream)$/;"	f	class:cOpenCLData
uploadAsync	opencl_data.h	/^::uploadAsync(unsigned int stream)$/;"	f	class:cOpenCLData
use_sse	Obj_opencl/force.h	/^  int use_sse;$/;"	m	class:Force
use_sse	force.h	/^  int use_sse;$/;"	m	class:Force
use_tex	Obj_opencl/atom.h	/^  int use_tex;$/;"	m	class:Atom
use_tex	atom.h	/^  int use_tex;$/;"	m	class:Atom
v	Obj_opencl/atom.h	/^  MMD_float3 *v;$/;"	m	class:Atom
v	atom.h	/^  MMD_float3 *v;$/;"	m	class:Atom
vold	Obj_opencl/atom.h	/^  MMD_float3 *vold;$/;"	m	class:Atom
vold	atom.h	/^  MMD_float3 *vold;$/;"	m	class:Atom
w	Obj_opencl/precision.h	/^ double w;$/;"	m	struct:sdouble4
w	Obj_opencl/precision.h	/^ float w;$/;"	m	struct:sfloat4
w	precision.h	/^ double w;$/;"	m	struct:sdouble4
w	precision.h	/^ float w;$/;"	m	struct:sfloat4
wrapper	Obj_opencl/opencl_data.h	/^	OpenCLWrapper* wrapper;$/;"	m	class:cOpenCLData
wrapper	opencl_data.h	/^	OpenCLWrapper* wrapper;$/;"	m	class:cOpenCLData
x	Obj_opencl/atom.h	/^  MMD_float3 *x;$/;"	m	class:Atom
x	Obj_opencl/opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
x	Obj_opencl/precision.h	/^ double x;$/;"	m	struct:sdouble3
x	Obj_opencl/precision.h	/^ double x;$/;"	m	struct:sdouble4
x	Obj_opencl/precision.h	/^ float x;$/;"	m	struct:sfloat3
x	Obj_opencl/precision.h	/^ float x;$/;"	m	struct:sfloat4
x	Obj_opencl/thermo.h	/^	MMD_float x,y;$/;"	m	struct:MMD_float2
x	atom.h	/^  MMD_float3 *x;$/;"	m	class:Atom
x	opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
x	precision.h	/^ double x;$/;"	m	struct:sdouble3
x	precision.h	/^ double x;$/;"	m	struct:sdouble4
x	precision.h	/^ float x;$/;"	m	struct:sfloat3
x	precision.h	/^ float x;$/;"	m	struct:sfloat4
x	thermo.h	/^	MMD_float x,y;$/;"	m	struct:MMD_float2
xhi	Obj_opencl/atom.h	/^  MMD_float xlo,xhi;$/;"	m	struct:Box
xhi	atom.h	/^  MMD_float xlo,xhi;$/;"	m	struct:Box
xlo	Obj_opencl/atom.h	/^  MMD_float xlo,xhi;$/;"	m	struct:Box
xlo	atom.h	/^  MMD_float xlo,xhi;$/;"	m	struct:Box
xprd	Obj_opencl/atom.h	/^  MMD_float xprd,yprd,zprd;$/;"	m	struct:Box
xprd	Obj_opencl/neighbor.h	/^  MMD_float xprd,yprd,zprd;           \/\/ box size$/;"	m	class:Neighbor
xprd	atom.h	/^  MMD_float xprd,yprd,zprd;$/;"	m	struct:Box
xprd	neighbor.h	/^  MMD_float xprd,yprd,zprd;           \/\/ box size$/;"	m	class:Neighbor
xx	Obj_opencl/opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
xx	opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
xy	Obj_opencl/opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
xy	opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
xyz	Obj_opencl/opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
xyz	opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
xzy	Obj_opencl/opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
xzy	opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
y	Obj_opencl/precision.h	/^ double y;$/;"	m	struct:sdouble3
y	Obj_opencl/precision.h	/^ double y;$/;"	m	struct:sdouble4
y	Obj_opencl/precision.h	/^ float y;$/;"	m	struct:sfloat3
y	Obj_opencl/precision.h	/^ float y;$/;"	m	struct:sfloat4
y	Obj_opencl/thermo.h	/^	MMD_float x,y;$/;"	m	struct:MMD_float2
y	precision.h	/^ double y;$/;"	m	struct:sdouble3
y	precision.h	/^ double y;$/;"	m	struct:sdouble4
y	precision.h	/^ float y;$/;"	m	struct:sfloat3
y	precision.h	/^ float y;$/;"	m	struct:sfloat4
y	thermo.h	/^	MMD_float x,y;$/;"	m	struct:MMD_float2
yhi	Obj_opencl/atom.h	/^  MMD_float ylo,yhi;$/;"	m	struct:Box
yhi	atom.h	/^  MMD_float ylo,yhi;$/;"	m	struct:Box
ylo	Obj_opencl/atom.h	/^  MMD_float ylo,yhi;$/;"	m	struct:Box
ylo	atom.h	/^  MMD_float ylo,yhi;$/;"	m	struct:Box
yprd	Obj_opencl/atom.h	/^  MMD_float xprd,yprd,zprd;$/;"	m	struct:Box
yprd	Obj_opencl/neighbor.h	/^  MMD_float xprd,yprd,zprd;           \/\/ box size$/;"	m	class:Neighbor
yprd	atom.h	/^  MMD_float xprd,yprd,zprd;$/;"	m	struct:Box
yprd	neighbor.h	/^  MMD_float xprd,yprd,zprd;           \/\/ box size$/;"	m	class:Neighbor
yx	Obj_opencl/opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
yx	opencl_data.h	/^enum copy_mode {x, xx, xy, yx, xyz, xzy}; \/\/ yxz, yzx, zxy, zyx not yet implemented since they were not needed yet$/;"	e	enum:copy_mode
z	Obj_opencl/precision.h	/^ double z;$/;"	m	struct:sdouble3
z	Obj_opencl/precision.h	/^ double z;$/;"	m	struct:sdouble4
z	Obj_opencl/precision.h	/^ float z;$/;"	m	struct:sfloat3
z	Obj_opencl/precision.h	/^ float z;$/;"	m	struct:sfloat4
z	precision.h	/^ double z;$/;"	m	struct:sdouble3
z	precision.h	/^ double z;$/;"	m	struct:sdouble4
z	precision.h	/^ float z;$/;"	m	struct:sfloat3
z	precision.h	/^ float z;$/;"	m	struct:sfloat4
zhi	Obj_opencl/atom.h	/^  MMD_float zlo,zhi;$/;"	m	struct:Box
zhi	atom.h	/^  MMD_float zlo,zhi;$/;"	m	struct:Box
zlo	Obj_opencl/atom.h	/^  MMD_float zlo,zhi;$/;"	m	struct:Box
zlo	atom.h	/^  MMD_float zlo,zhi;$/;"	m	struct:Box
zprd	Obj_opencl/atom.h	/^  MMD_float xprd,yprd,zprd;$/;"	m	struct:Box
zprd	Obj_opencl/neighbor.h	/^  MMD_float xprd,yprd,zprd;           \/\/ box size$/;"	m	class:Neighbor
zprd	atom.h	/^  MMD_float xprd,yprd,zprd;$/;"	m	struct:Box
zprd	neighbor.h	/^  MMD_float xprd,yprd,zprd;           \/\/ box size$/;"	m	class:Neighbor
~Atom	Obj_opencl/atom.cpp	/^Atom::~Atom()$/;"	f	class:Atom
~Atom	atom.cpp	/^Atom::~Atom()$/;"	f	class:Atom
~Comm	Obj_opencl/comm.cpp	/^Comm::~Comm() {}$/;"	f	class:Comm
~Comm	comm.cpp	/^Comm::~Comm() {}$/;"	f	class:Comm
~Force	Obj_opencl/force.cpp	/^Force::~Force() {}$/;"	f	class:Force
~Force	force.cpp	/^Force::~Force() {}$/;"	f	class:Force
~Integrate	Obj_opencl/integrate.cpp	/^Integrate::~Integrate() {}$/;"	f	class:Integrate
~Integrate	integrate.cpp	/^Integrate::~Integrate() {}$/;"	f	class:Integrate
~Neighbor	Obj_opencl/neighbor.cpp	/^Neighbor::~Neighbor()$/;"	f	class:Neighbor
~Neighbor	neighbor.cpp	/^Neighbor::~Neighbor()$/;"	f	class:Neighbor
~OpenCLWrapper	Obj_opencl/opencl_wrapper.cpp	/^OpenCLWrapper::~OpenCLWrapper()$/;"	f	class:OpenCLWrapper
~OpenCLWrapper	opencl_wrapper.cpp	/^OpenCLWrapper::~OpenCLWrapper()$/;"	f	class:OpenCLWrapper
~Thermo	Obj_opencl/thermo.cpp	/^Thermo::~Thermo() {}$/;"	f	class:Thermo
~Thermo	thermo.cpp	/^Thermo::~Thermo() {}$/;"	f	class:Thermo
~ThreadData	Obj_opencl/threadData.h	/^  ~ThreadData() {};$/;"	f	class:ThreadData
~ThreadData	threadData.h	/^  ~ThreadData() {};$/;"	f	class:ThreadData
~Timer	Obj_opencl/timer.cpp	/^Timer::~Timer()$/;"	f	class:Timer
~Timer	timer.cpp	/^Timer::~Timer()$/;"	f	class:Timer
~cOpenCLData	Obj_opencl/opencl_data.h	/^::~cOpenCLData()$/;"	f	class:cOpenCLData
~cOpenCLData	opencl_data.h	/^::~cOpenCLData()$/;"	f	class:cOpenCLData
